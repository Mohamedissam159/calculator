
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dfa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000dfa  00000e6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000015e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000108b  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000430  00000000  00000000  000027cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a56  00000000  00000000  00002bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000027c  00000000  00000000  00003654  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ec  00000000  00000000  000038d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c3b  00000000  00000000  00003cbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>

#include <avr/io.h>

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0xa>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	label:	CLCD_vInit();
	KPD_vINIT();
	
	u8 arr[6]={KPD_NO_PRESSED_KEY,KPD_NO_PRESSED_KEY,KPD_NO_PRESSED_KEY,KPD_NO_PRESSED_KEY,KPD_NO_PRESSED_KEY,KPD_NO_PRESSED_KEY} ;
  a0:	0f 2e       	mov	r0, r31
  a2:	f0 e6       	ldi	r31, 0x60	; 96
  a4:	cf 2e       	mov	r12, r31
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	df 2e       	mov	r13, r31
  aa:	f0 2d       	mov	r31, r0
  ac:	0f 2e       	mov	r0, r31
  ae:	f6 e0       	ldi	r31, 0x06	; 6
  b0:	ef 2e       	mov	r14, r31
  b2:	f0 2d       	mov	r31, r0
	u16 res ;
	u8 counter=0 ;
  b4:	bb 24       	eor	r11, r11

#include <avr/io.h>

int main(void)
{
	label:	CLCD_vInit();
  b6:	0e 94 37 02 	call	0x46e	; 0x46e <CLCD_vInit>
	KPD_vINIT();
  ba:	0e 94 c2 05 	call	0xb84	; 0xb84 <KPD_vINIT>
	
	u8 arr[6]={KPD_NO_PRESSED_KEY,KPD_NO_PRESSED_KEY,KPD_NO_PRESSED_KEY,KPD_NO_PRESSED_KEY,KPD_NO_PRESSED_KEY,KPD_NO_PRESSED_KEY} ;
  be:	de 01       	movw	r26, r28
  c0:	11 96       	adiw	r26, 0x01	; 1
  c2:	f6 01       	movw	r30, r12
  c4:	8e 2d       	mov	r24, r14
  c6:	01 90       	ld	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	81 50       	subi	r24, 0x01	; 1
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x34>
	u16 res ;
	u8 counter=0 ;
  ce:	fb 2c       	mov	r15, r11
	
    while(1)
    {
        do
        {
	        arr[counter]= KPD_u8GetPressdKey();
  d0:	0e 94 13 06 	call	0xc26	; 0xc26 <KPD_u8GetPressdKey>
  d4:	e1 e0       	ldi	r30, 0x01	; 1
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ec 0f       	add	r30, r28
  da:	fd 1f       	adc	r31, r29
  dc:	ef 0d       	add	r30, r15
  de:	f1 1d       	adc	r31, r1
  e0:	80 83       	st	Z, r24
        }while(arr[counter]==KPD_NO_PRESSED_KEY);
  e2:	8f 3f       	cpi	r24, 0xFF	; 255
  e4:	a9 f3       	breq	.-22     	; 0xd0 <main+0x3e>
		
		if(arr[counter]=='A'||arr[counter]=='='||arr[counter]=='+'||arr[counter]=='-'||arr[counter]=='*'||arr[counter]=='/')
  e6:	81 34       	cpi	r24, 0x41	; 65
  e8:	51 f0       	breq	.+20     	; 0xfe <main+0x6c>
  ea:	8d 33       	cpi	r24, 0x3D	; 61
  ec:	41 f0       	breq	.+16     	; 0xfe <main+0x6c>
  ee:	8b 32       	cpi	r24, 0x2B	; 43
  f0:	31 f0       	breq	.+12     	; 0xfe <main+0x6c>
  f2:	8d 32       	cpi	r24, 0x2D	; 45
  f4:	21 f0       	breq	.+8      	; 0xfe <main+0x6c>
  f6:	8a 32       	cpi	r24, 0x2A	; 42
  f8:	11 f0       	breq	.+4      	; 0xfe <main+0x6c>
  fa:	8f 32       	cpi	r24, 0x2F	; 47
  fc:	19 f4       	brne	.+6      	; 0x104 <main+0x72>
		{
			CLCD_vClearscreen();
  fe:	0e 94 42 03 	call	0x684	; 0x684 <CLCD_vClearscreen>
			goto label ;
 102:	d9 cf       	rjmp	.-78     	; 0xb6 <main+0x24>
		}
		else
		{
			 CLCD_vWriteNumber(arr[counter]-48);
 104:	68 2f       	mov	r22, r24
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	60 53       	subi	r22, 0x30	; 48
 10a:	70 40       	sbci	r23, 0x00	; 0
 10c:	88 27       	eor	r24, r24
 10e:	77 fd       	sbrc	r23, 7
 110:	80 95       	com	r24
 112:	98 2f       	mov	r25, r24
 114:	0e 94 92 02 	call	0x524	; 0x524 <CLCD_vWriteNumber>
		}
		counter++;
 118:	8f 2d       	mov	r24, r15
 11a:	8f 5f       	subi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	32 e5       	ldi	r19, 0x52	; 82
 120:	47 e0       	ldi	r20, 0x07	; 7
 122:	21 50       	subi	r18, 0x01	; 1
 124:	30 40       	sbci	r19, 0x00	; 0
 126:	40 40       	sbci	r20, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x90>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x9a>
 12c:	00 00       	nop
		_delay_ms(300);
		
		do
		{
			arr[counter]= KPD_u8GetPressdKey();
 12e:	01 e0       	ldi	r16, 0x01	; 1
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	0c 0f       	add	r16, r28
 134:	1d 1f       	adc	r17, r29
 136:	08 0f       	add	r16, r24
 138:	11 1d       	adc	r17, r1
 13a:	0e 94 13 06 	call	0xc26	; 0xc26 <KPD_u8GetPressdKey>
 13e:	d8 01       	movw	r26, r16
 140:	8c 93       	st	X, r24
		}while(arr[counter]==KPD_NO_PRESSED_KEY);
 142:	8f 3f       	cpi	r24, 0xFF	; 255
 144:	d1 f3       	breq	.-12     	; 0x13a <main+0xa8>
		
		if(arr[counter]=='A'||arr[counter]=='='||arr[counter]=='+'||arr[counter]=='-'||arr[counter]=='*'||arr[counter]=='/')
 146:	81 34       	cpi	r24, 0x41	; 65
 148:	51 f0       	breq	.+20     	; 0x15e <main+0xcc>
 14a:	8d 33       	cpi	r24, 0x3D	; 61
 14c:	41 f0       	breq	.+16     	; 0x15e <main+0xcc>
 14e:	8b 32       	cpi	r24, 0x2B	; 43
 150:	31 f0       	breq	.+12     	; 0x15e <main+0xcc>
 152:	8d 32       	cpi	r24, 0x2D	; 45
 154:	21 f0       	breq	.+8      	; 0x15e <main+0xcc>
 156:	8a 32       	cpi	r24, 0x2A	; 42
 158:	11 f0       	breq	.+4      	; 0x15e <main+0xcc>
 15a:	8f 32       	cpi	r24, 0x2F	; 47
 15c:	19 f4       	brne	.+6      	; 0x164 <main+0xd2>
		{
			CLCD_vClearscreen();
 15e:	0e 94 42 03 	call	0x684	; 0x684 <CLCD_vClearscreen>
			goto label ;
 162:	a9 cf       	rjmp	.-174    	; 0xb6 <main+0x24>
		}
		else
		{
			CLCD_vWriteNumber(arr[counter]-48);
 164:	68 2f       	mov	r22, r24
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	60 53       	subi	r22, 0x30	; 48
 16a:	70 40       	sbci	r23, 0x00	; 0
 16c:	88 27       	eor	r24, r24
 16e:	77 fd       	sbrc	r23, 7
 170:	80 95       	com	r24
 172:	98 2f       	mov	r25, r24
 174:	0e 94 92 02 	call	0x524	; 0x524 <CLCD_vWriteNumber>
		}
		counter++;
 178:	8f 2d       	mov	r24, r15
 17a:	8e 5f       	subi	r24, 0xFE	; 254
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	32 e5       	ldi	r19, 0x52	; 82
 180:	47 e0       	ldi	r20, 0x07	; 7
 182:	21 50       	subi	r18, 0x01	; 1
 184:	30 40       	sbci	r19, 0x00	; 0
 186:	40 40       	sbci	r20, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0xf0>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0xfa>
 18c:	00 00       	nop
		_delay_ms(300);
		
		do
		{
			arr[counter]= KPD_u8GetPressdKey();
 18e:	01 e0       	ldi	r16, 0x01	; 1
 190:	10 e0       	ldi	r17, 0x00	; 0
 192:	0c 0f       	add	r16, r28
 194:	1d 1f       	adc	r17, r29
 196:	08 0f       	add	r16, r24
 198:	11 1d       	adc	r17, r1
 19a:	0e 94 13 06 	call	0xc26	; 0xc26 <KPD_u8GetPressdKey>
 19e:	d8 01       	movw	r26, r16
 1a0:	8c 93       	st	X, r24
		}while(arr[counter]==KPD_NO_PRESSED_KEY);
 1a2:	8f 3f       	cpi	r24, 0xFF	; 255
 1a4:	d1 f3       	breq	.-12     	; 0x19a <main+0x108>
		
		if(arr[counter]=='A'||arr[counter]=='=')
 1a6:	81 34       	cpi	r24, 0x41	; 65
 1a8:	11 f0       	breq	.+4      	; 0x1ae <main+0x11c>
 1aa:	8d 33       	cpi	r24, 0x3D	; 61
 1ac:	19 f4       	brne	.+6      	; 0x1b4 <main+0x122>
		{
			CLCD_vClearscreen();
 1ae:	0e 94 42 03 	call	0x684	; 0x684 <CLCD_vClearscreen>
			goto label ;
 1b2:	81 cf       	rjmp	.-254    	; 0xb6 <main+0x24>
		}
		else
		{
			CLCD_vSendData(arr[counter]);
 1b4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <CLCD_vSendData>
		}
		counter++;
 1b8:	8f 2d       	mov	r24, r15
 1ba:	8d 5f       	subi	r24, 0xFD	; 253
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	32 e5       	ldi	r19, 0x52	; 82
 1c0:	47 e0       	ldi	r20, 0x07	; 7
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	30 40       	sbci	r19, 0x00	; 0
 1c6:	40 40       	sbci	r20, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0x130>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x13a>
 1cc:	00 00       	nop
		_delay_ms(300);
		
		do
		{
			arr[counter]= KPD_u8GetPressdKey();
 1ce:	01 e0       	ldi	r16, 0x01	; 1
 1d0:	10 e0       	ldi	r17, 0x00	; 0
 1d2:	0c 0f       	add	r16, r28
 1d4:	1d 1f       	adc	r17, r29
 1d6:	08 0f       	add	r16, r24
 1d8:	11 1d       	adc	r17, r1
 1da:	0e 94 13 06 	call	0xc26	; 0xc26 <KPD_u8GetPressdKey>
 1de:	d8 01       	movw	r26, r16
 1e0:	8c 93       	st	X, r24
		}while(arr[counter]==KPD_NO_PRESSED_KEY);
 1e2:	8f 3f       	cpi	r24, 0xFF	; 255
 1e4:	d1 f3       	breq	.-12     	; 0x1da <main+0x148>
		
		if(arr[counter]=='A'||arr[counter]=='='||arr[counter]=='+'||arr[counter]=='-'||arr[counter]=='*'||arr[counter]=='/')
 1e6:	81 34       	cpi	r24, 0x41	; 65
 1e8:	51 f0       	breq	.+20     	; 0x1fe <main+0x16c>
 1ea:	8d 33       	cpi	r24, 0x3D	; 61
 1ec:	41 f0       	breq	.+16     	; 0x1fe <main+0x16c>
 1ee:	8b 32       	cpi	r24, 0x2B	; 43
 1f0:	31 f0       	breq	.+12     	; 0x1fe <main+0x16c>
 1f2:	8d 32       	cpi	r24, 0x2D	; 45
 1f4:	21 f0       	breq	.+8      	; 0x1fe <main+0x16c>
 1f6:	8a 32       	cpi	r24, 0x2A	; 42
 1f8:	11 f0       	breq	.+4      	; 0x1fe <main+0x16c>
 1fa:	8f 32       	cpi	r24, 0x2F	; 47
 1fc:	19 f4       	brne	.+6      	; 0x204 <main+0x172>
		{
			CLCD_vClearscreen();
 1fe:	0e 94 42 03 	call	0x684	; 0x684 <CLCD_vClearscreen>
			goto label ;
 202:	59 cf       	rjmp	.-334    	; 0xb6 <main+0x24>
		}
		else
		{
			CLCD_vWriteNumber(arr[counter]-48);
 204:	68 2f       	mov	r22, r24
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	60 53       	subi	r22, 0x30	; 48
 20a:	70 40       	sbci	r23, 0x00	; 0
 20c:	88 27       	eor	r24, r24
 20e:	77 fd       	sbrc	r23, 7
 210:	80 95       	com	r24
 212:	98 2f       	mov	r25, r24
 214:	0e 94 92 02 	call	0x524	; 0x524 <CLCD_vWriteNumber>
		}
		counter++;
 218:	8f 2d       	mov	r24, r15
 21a:	8c 5f       	subi	r24, 0xFC	; 252
 21c:	2f ef       	ldi	r18, 0xFF	; 255
 21e:	32 e5       	ldi	r19, 0x52	; 82
 220:	47 e0       	ldi	r20, 0x07	; 7
 222:	21 50       	subi	r18, 0x01	; 1
 224:	30 40       	sbci	r19, 0x00	; 0
 226:	40 40       	sbci	r20, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <main+0x190>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x19a>
 22c:	00 00       	nop
		_delay_ms(300);
		
		do
		{
			arr[counter]= KPD_u8GetPressdKey();
 22e:	01 e0       	ldi	r16, 0x01	; 1
 230:	10 e0       	ldi	r17, 0x00	; 0
 232:	0c 0f       	add	r16, r28
 234:	1d 1f       	adc	r17, r29
 236:	08 0f       	add	r16, r24
 238:	11 1d       	adc	r17, r1
 23a:	0e 94 13 06 	call	0xc26	; 0xc26 <KPD_u8GetPressdKey>
 23e:	d8 01       	movw	r26, r16
 240:	8c 93       	st	X, r24
		}while(arr[counter]==KPD_NO_PRESSED_KEY);
 242:	8f 3f       	cpi	r24, 0xFF	; 255
 244:	d1 f3       	breq	.-12     	; 0x23a <main+0x1a8>
		
		if(arr[counter]=='A'||arr[counter]=='='||arr[counter]=='+'||arr[counter]=='-'||arr[counter]=='*'||arr[counter]=='/')
 246:	81 34       	cpi	r24, 0x41	; 65
 248:	51 f0       	breq	.+20     	; 0x25e <main+0x1cc>
 24a:	8d 33       	cpi	r24, 0x3D	; 61
 24c:	41 f0       	breq	.+16     	; 0x25e <main+0x1cc>
 24e:	8b 32       	cpi	r24, 0x2B	; 43
 250:	31 f0       	breq	.+12     	; 0x25e <main+0x1cc>
 252:	8d 32       	cpi	r24, 0x2D	; 45
 254:	21 f0       	breq	.+8      	; 0x25e <main+0x1cc>
 256:	8a 32       	cpi	r24, 0x2A	; 42
 258:	11 f0       	breq	.+4      	; 0x25e <main+0x1cc>
 25a:	8f 32       	cpi	r24, 0x2F	; 47
 25c:	19 f4       	brne	.+6      	; 0x264 <main+0x1d2>
		{
			CLCD_vClearscreen();
 25e:	0e 94 42 03 	call	0x684	; 0x684 <CLCD_vClearscreen>
			goto label ;
 262:	29 cf       	rjmp	.-430    	; 0xb6 <main+0x24>
		}
		else
		{
			CLCD_vWriteNumber(arr[counter]-48);
 264:	68 2f       	mov	r22, r24
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	60 53       	subi	r22, 0x30	; 48
 26a:	70 40       	sbci	r23, 0x00	; 0
 26c:	88 27       	eor	r24, r24
 26e:	77 fd       	sbrc	r23, 7
 270:	80 95       	com	r24
 272:	98 2f       	mov	r25, r24
 274:	0e 94 92 02 	call	0x524	; 0x524 <CLCD_vWriteNumber>
		}
		counter++;
 278:	b5 e0       	ldi	r27, 0x05	; 5
 27a:	fb 0e       	add	r15, r27
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	32 e5       	ldi	r19, 0x52	; 82
 280:	47 e0       	ldi	r20, 0x07	; 7
 282:	21 50       	subi	r18, 0x01	; 1
 284:	30 40       	sbci	r19, 0x00	; 0
 286:	40 40       	sbci	r20, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x1f0>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x1fa>
 28c:	00 00       	nop
		_delay_ms(300);
		
		do
		{
			arr[counter]= KPD_u8GetPressdKey();
 28e:	01 e0       	ldi	r16, 0x01	; 1
 290:	10 e0       	ldi	r17, 0x00	; 0
 292:	0c 0f       	add	r16, r28
 294:	1d 1f       	adc	r17, r29
 296:	0f 0d       	add	r16, r15
 298:	11 1d       	adc	r17, r1
 29a:	0e 94 13 06 	call	0xc26	; 0xc26 <KPD_u8GetPressdKey>
 29e:	d8 01       	movw	r26, r16
 2a0:	8c 93       	st	X, r24
		}while(arr[counter]==KPD_NO_PRESSED_KEY);
 2a2:	8f 3f       	cpi	r24, 0xFF	; 255
 2a4:	d1 f3       	breq	.-12     	; 0x29a <main+0x208>
		
		if(arr[counter]=='=')
 2a6:	8d 33       	cpi	r24, 0x3D	; 61
 2a8:	09 f0       	breq	.+2      	; 0x2ac <main+0x21a>
 2aa:	b2 c0       	rjmp	.+356    	; 0x410 <main+0x37e>
		{
			CLCD_vSendData(arr[counter]);
 2ac:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <CLCD_vSendData>
			
			switch(arr[2])
 2b0:	8b 81       	ldd	r24, Y+3	; 0x03
 2b2:	8b 32       	cpi	r24, 0x2B	; 43
 2b4:	61 f0       	breq	.+24     	; 0x2ce <main+0x23c>
 2b6:	8c 32       	cpi	r24, 0x2C	; 44
 2b8:	20 f4       	brcc	.+8      	; 0x2c2 <main+0x230>
 2ba:	8a 32       	cpi	r24, 0x2A	; 42
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <main+0x22e>
 2be:	ab c0       	rjmp	.+342    	; 0x416 <main+0x384>
 2c0:	52 c0       	rjmp	.+164    	; 0x366 <main+0x2d4>
 2c2:	8d 32       	cpi	r24, 0x2D	; 45
 2c4:	51 f1       	breq	.+84     	; 0x31a <main+0x288>
 2c6:	8f 32       	cpi	r24, 0x2F	; 47
 2c8:	09 f0       	breq	.+2      	; 0x2cc <main+0x23a>
 2ca:	a5 c0       	rjmp	.+330    	; 0x416 <main+0x384>
 2cc:	78 c0       	rjmp	.+240    	; 0x3be <main+0x32c>
			{
				case '+' : res=((arr[0]-48)*10)+((arr[1]-48))+((arr[3]-48)*10)+((arr[4]-48));
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	ac 01       	movw	r20, r24
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	44 0f       	add	r20, r20
 2de:	55 1f       	adc	r21, r21
 2e0:	48 0f       	add	r20, r24
 2e2:	59 1f       	adc	r21, r25
 2e4:	8a 81       	ldd	r24, Y+2	; 0x02
 2e6:	48 0f       	add	r20, r24
 2e8:	51 1d       	adc	r21, r1
 2ea:	8c 81       	ldd	r24, Y+4	; 0x04
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	9c 01       	movw	r18, r24
 2f4:	22 0f       	add	r18, r18
 2f6:	33 1f       	adc	r19, r19
 2f8:	22 0f       	add	r18, r18
 2fa:	33 1f       	adc	r19, r19
 2fc:	82 0f       	add	r24, r18
 2fe:	93 1f       	adc	r25, r19
 300:	84 0f       	add	r24, r20
 302:	95 1f       	adc	r25, r21
 304:	2d 81       	ldd	r18, Y+5	; 0x05
 306:	bc 01       	movw	r22, r24
 308:	62 0f       	add	r22, r18
 30a:	71 1d       	adc	r23, r1
 30c:	60 52       	subi	r22, 0x20	; 32
 30e:	74 40       	sbci	r23, 0x04	; 4
							CLCD_vWriteNumber(res);
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 92 02 	call	0x524	; 0x524 <CLCD_vWriteNumber>
				break;
 318:	7e c0       	rjmp	.+252    	; 0x416 <main+0x384>
				
				case '-' : res=((arr[0]-48)*10)+((arr[1]-48))-((arr[3]-48)*10)+((arr[4]-48));
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	ac 01       	movw	r20, r24
 324:	44 0f       	add	r20, r20
 326:	55 1f       	adc	r21, r21
 328:	44 0f       	add	r20, r20
 32a:	55 1f       	adc	r21, r21
 32c:	48 0f       	add	r20, r24
 32e:	59 1f       	adc	r21, r25
 330:	8a 81       	ldd	r24, Y+2	; 0x02
 332:	48 0f       	add	r20, r24
 334:	51 1d       	adc	r21, r1
 336:	8c 81       	ldd	r24, Y+4	; 0x04
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	9c 01       	movw	r18, r24
 340:	22 0f       	add	r18, r18
 342:	33 1f       	adc	r19, r19
 344:	22 0f       	add	r18, r18
 346:	33 1f       	adc	r19, r19
 348:	82 0f       	add	r24, r18
 34a:	93 1f       	adc	r25, r19
 34c:	ba 01       	movw	r22, r20
 34e:	68 1b       	sub	r22, r24
 350:	79 0b       	sbc	r23, r25
 352:	8d 81       	ldd	r24, Y+5	; 0x05
 354:	68 0f       	add	r22, r24
 356:	71 1d       	adc	r23, r1
 358:	60 56       	subi	r22, 0x60	; 96
 35a:	70 40       	sbci	r23, 0x00	; 0
							CLCD_vWriteNumber(res);
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 92 02 	call	0x524	; 0x524 <CLCD_vWriteNumber>
				break;
 364:	58 c0       	rjmp	.+176    	; 0x416 <main+0x384>
				
				case '*' : res=(((arr[0]-48)*10)+((arr[1]-48)))*(((arr[3]-48)*10)+((arr[4]-48)));
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	ac 01       	movw	r20, r24
 370:	44 0f       	add	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	44 0f       	add	r20, r20
 376:	55 1f       	adc	r21, r21
 378:	48 0f       	add	r20, r24
 37a:	59 1f       	adc	r21, r25
 37c:	8a 81       	ldd	r24, Y+2	; 0x02
 37e:	48 0f       	add	r20, r24
 380:	51 1d       	adc	r21, r1
 382:	40 51       	subi	r20, 0x10	; 16
 384:	52 40       	sbci	r21, 0x02	; 2
 386:	8c 81       	ldd	r24, Y+4	; 0x04
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	9c 01       	movw	r18, r24
 390:	22 0f       	add	r18, r18
 392:	33 1f       	adc	r19, r19
 394:	22 0f       	add	r18, r18
 396:	33 1f       	adc	r19, r19
 398:	82 0f       	add	r24, r18
 39a:	93 1f       	adc	r25, r19
 39c:	2d 81       	ldd	r18, Y+5	; 0x05
 39e:	82 0f       	add	r24, r18
 3a0:	91 1d       	adc	r25, r1
 3a2:	80 51       	subi	r24, 0x10	; 16
 3a4:	92 40       	sbci	r25, 0x02	; 2
 3a6:	48 9f       	mul	r20, r24
 3a8:	b0 01       	movw	r22, r0
 3aa:	49 9f       	mul	r20, r25
 3ac:	70 0d       	add	r23, r0
 3ae:	58 9f       	mul	r21, r24
 3b0:	70 0d       	add	r23, r0
 3b2:	11 24       	eor	r1, r1
							CLCD_vWriteNumber(res);
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 92 02 	call	0x524	; 0x524 <CLCD_vWriteNumber>
				break;
 3bc:	2c c0       	rjmp	.+88     	; 0x416 <main+0x384>
				
				case '/' : res=(((arr[0]-48)*10)+((arr[1]-48)))/(((arr[3]-48)*10)+((arr[4]-48)));
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	ac 01       	movw	r20, r24
 3c8:	44 0f       	add	r20, r20
 3ca:	55 1f       	adc	r21, r21
 3cc:	44 0f       	add	r20, r20
 3ce:	55 1f       	adc	r21, r21
 3d0:	48 0f       	add	r20, r24
 3d2:	59 1f       	adc	r21, r25
 3d4:	8a 81       	ldd	r24, Y+2	; 0x02
 3d6:	48 0f       	add	r20, r24
 3d8:	51 1d       	adc	r21, r1
 3da:	40 51       	subi	r20, 0x10	; 16
 3dc:	52 40       	sbci	r21, 0x02	; 2
 3de:	8c 81       	ldd	r24, Y+4	; 0x04
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	9c 01       	movw	r18, r24
 3e8:	22 0f       	add	r18, r18
 3ea:	33 1f       	adc	r19, r19
 3ec:	22 0f       	add	r18, r18
 3ee:	33 1f       	adc	r19, r19
 3f0:	bc 01       	movw	r22, r24
 3f2:	62 0f       	add	r22, r18
 3f4:	73 1f       	adc	r23, r19
 3f6:	8d 81       	ldd	r24, Y+5	; 0x05
 3f8:	68 0f       	add	r22, r24
 3fa:	71 1d       	adc	r23, r1
 3fc:	60 51       	subi	r22, 0x10	; 16
 3fe:	72 40       	sbci	r23, 0x02	; 2
 400:	ca 01       	movw	r24, r20
 402:	0e 94 b2 06 	call	0xd64	; 0xd64 <__divmodhi4>
							CLCD_vWriteNumber(res);
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 92 02 	call	0x524	; 0x524 <CLCD_vWriteNumber>
				break;
 40e:	03 c0       	rjmp	.+6      	; 0x416 <main+0x384>
			}
			
		}
		else
		{
			CLCD_vClearscreen();
 410:	0e 94 42 03 	call	0x684	; 0x684 <CLCD_vClearscreen>
			goto label ;
 414:	50 ce       	rjmp	.-864    	; 0xb6 <main+0x24>
 416:	2f ef       	ldi	r18, 0xFF	; 255
 418:	31 ee       	ldi	r19, 0xE1	; 225
 41a:	44 e0       	ldi	r20, 0x04	; 4
 41c:	21 50       	subi	r18, 0x01	; 1
 41e:	30 40       	sbci	r19, 0x00	; 0
 420:	40 40       	sbci	r20, 0x00	; 0
 422:	e1 f7       	brne	.-8      	; 0x41c <main+0x38a>
 424:	00 c0       	rjmp	.+0      	; 0x426 <main+0x394>
 426:	00 00       	nop
 428:	53 ce       	rjmp	.-858    	; 0xd0 <main+0x3e>

0000042a <CLCD_vSendCommand>:




void CLCD_vSendCommand(u8 command)
{
 42a:	cf 93       	push	r28
 42c:	c8 2f       	mov	r28, r24
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
	
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
	
	DIO_u8SetPortValue(CLCD_DATA_PORT,command);
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	6c 2f       	mov	r22, r28
 446:	0e 94 a8 04 	call	0x950	; 0x950 <DIO_u8SetPortValue>
	
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	62 e0       	ldi	r22, 0x02	; 2
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
 454:	8f e9       	ldi	r24, 0x9F	; 159
 456:	9f e0       	ldi	r25, 0x0F	; 15
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <CLCD_vSendCommand+0x2e>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <CLCD_vSendCommand+0x34>
 45e:	00 00       	nop
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	62 e0       	ldi	r22, 0x02	; 2
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
	
}
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <CLCD_vInit>:


void CLCD_vInit(void)
{
	/*locating direction*/
	DIO_u8SetportDirection(CLCD_DATA_PORT,DIO_u8PORT_OUTPUT);
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	6f ef       	ldi	r22, 0xFF	; 255
 472:	0e 94 ed 03 	call	0x7da	; 0x7da <DIO_u8SetportDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_OUTPUT);
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	41 e0       	ldi	r20, 0x01	; 1
 47c:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_OUTPUT);
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	41 e0       	ldi	r20, 0x01	; 1
 486:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	62 e0       	ldi	r22, 0x02	; 2
 48e:	41 e0       	ldi	r20, 0x01	; 1
 490:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_u8SetPinDirection>
 494:	8f e5       	ldi	r24, 0x5F	; 95
 496:	9a ee       	ldi	r25, 0xEA	; 234
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <CLCD_vInit+0x2a>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <CLCD_vInit+0x30>
 49e:	00 00       	nop
	
	
	_delay_ms(30);
	/*Function Set Command: 2Line , 5*8 Font Size */
	CLCD_vSendCommand(0b00111000);
 4a0:	88 e3       	ldi	r24, 0x38	; 56
 4a2:	0e 94 15 02 	call	0x42a	; 0x42a <CLCD_vSendCommand>
	/*Display On Off Control: display enable , disable cursor , no Blink*/
	CLCD_vSendCommand(0b00001100);
 4a6:	8c e0       	ldi	r24, 0x0C	; 12
 4a8:	0e 94 15 02 	call	0x42a	; 0x42a <CLCD_vSendCommand>
	/*Display Clear */
	CLCD_vSendCommand(1);
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 15 02 	call	0x42a	; 0x42a <CLCD_vSendCommand>
}
 4b2:	08 95       	ret

000004b4 <CLCD_vSendData>:
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
	
}

void CLCD_vSendData(u8 data)
{
 4b4:	cf 93       	push	r28
 4b6:	c8 2f       	mov	r28, r24
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	41 e0       	ldi	r20, 0x01	; 1
 4be:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
	
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	40 e0       	ldi	r20, 0x00	; 0
 4c8:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
	
	DIO_u8SetPortValue(CLCD_DATA_PORT,data);
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	6c 2f       	mov	r22, r28
 4d0:	0e 94 a8 04 	call	0x950	; 0x950 <DIO_u8SetPortValue>
	
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	62 e0       	ldi	r22, 0x02	; 2
 4d8:	41 e0       	ldi	r20, 0x01	; 1
 4da:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
 4de:	8f e9       	ldi	r24, 0x9F	; 159
 4e0:	9f e0       	ldi	r25, 0x0F	; 15
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <CLCD_vSendData+0x2e>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <CLCD_vSendData+0x34>
 4e8:	00 00       	nop
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
 4ea:	82 e0       	ldi	r24, 0x02	; 2
 4ec:	62 e0       	ldi	r22, 0x02	; 2
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
}
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <CLCD_vSendString>:

void CLCD_vSendString(char *data)
{
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	8c 01       	movw	r16, r24
	u8 Local_u8Counter=0;
	while (data[Local_u8Counter]!='\0')
 500:	fc 01       	movw	r30, r24
 502:	80 81       	ld	r24, Z
 504:	88 23       	and	r24, r24
 506:	51 f0       	breq	.+20     	; 0x51c <CLCD_vSendString+0x24>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
}

void CLCD_vSendString(char *data)
{
	u8 Local_u8Counter=0;
 508:	c0 e0       	ldi	r28, 0x00	; 0
	while (data[Local_u8Counter]!='\0')
	{
		CLCD_vSendData(data[Local_u8Counter]);
 50a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <CLCD_vSendData>
		Local_u8Counter++;
 50e:	cf 5f       	subi	r28, 0xFF	; 255
}

void CLCD_vSendString(char *data)
{
	u8 Local_u8Counter=0;
	while (data[Local_u8Counter]!='\0')
 510:	f8 01       	movw	r30, r16
 512:	ec 0f       	add	r30, r28
 514:	f1 1d       	adc	r31, r1
 516:	80 81       	ld	r24, Z
 518:	88 23       	and	r24, r24
 51a:	b9 f7       	brne	.-18     	; 0x50a <CLCD_vSendString+0x12>
	{
		CLCD_vSendData(data[Local_u8Counter]);
		Local_u8Counter++;

	}
}
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	08 95       	ret

00000524 <CLCD_vWriteNumber>:

void CLCD_vWriteNumber(u32 number)
{
 524:	4f 92       	push	r4
 526:	5f 92       	push	r5
 528:	6f 92       	push	r6
 52a:	7f 92       	push	r7
 52c:	8f 92       	push	r8
 52e:	9f 92       	push	r9
 530:	af 92       	push	r10
 532:	bf 92       	push	r11
 534:	cf 92       	push	r12
 536:	df 92       	push	r13
 538:	ef 92       	push	r14
 53a:	ff 92       	push	r15
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	6b 01       	movw	r12, r22
 542:	7c 01       	movw	r14, r24
	u32 Local_flag=1;
	if (number==0)
 544:	61 15       	cp	r22, r1
 546:	71 05       	cpc	r23, r1
 548:	81 05       	cpc	r24, r1
 54a:	91 05       	cpc	r25, r1
 54c:	21 f4       	brne	.+8      	; 0x556 <CLCD_vWriteNumber+0x32>
	{
		CLCD_vSendData('0');
 54e:	80 e3       	ldi	r24, 0x30	; 48
 550:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <CLCD_vSendData>
 554:	4f c0       	rjmp	.+158    	; 0x5f4 <CLCD_vWriteNumber+0xd0>
}

void CLCD_vWriteNumber(u32 number)
{
	u32 Local_flag=1;
	if (number==0)
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	a0 e0       	ldi	r26, 0x00	; 0
 55c:	b0 e0       	ldi	r27, 0x00	; 0
	}
	else
	{
		while(number!=0)
		{
			Local_flag=(number%10)+(Local_flag*10);
 55e:	0f 2e       	mov	r0, r31
 560:	fa e0       	ldi	r31, 0x0A	; 10
 562:	8f 2e       	mov	r8, r31
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	9f 2e       	mov	r9, r31
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	af 2e       	mov	r10, r31
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	bf 2e       	mov	r11, r31
 570:	f0 2d       	mov	r31, r0
 572:	bc 01       	movw	r22, r24
 574:	cd 01       	movw	r24, r26
 576:	a5 01       	movw	r20, r10
 578:	94 01       	movw	r18, r8
 57a:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsi3>
 57e:	2b 01       	movw	r4, r22
 580:	3c 01       	movw	r6, r24
 582:	c7 01       	movw	r24, r14
 584:	b6 01       	movw	r22, r12
 586:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__udivmodsi4>
 58a:	dc 01       	movw	r26, r24
 58c:	cb 01       	movw	r24, r22
 58e:	84 0d       	add	r24, r4
 590:	95 1d       	adc	r25, r5
 592:	a6 1d       	adc	r26, r6
 594:	b7 1d       	adc	r27, r7
			number/=10;
 596:	c2 2e       	mov	r12, r18
 598:	d3 2e       	mov	r13, r19
 59a:	e4 2e       	mov	r14, r20
 59c:	f5 2e       	mov	r15, r21
	{
		CLCD_vSendData('0');
	}
	else
	{
		while(number!=0)
 59e:	c1 14       	cp	r12, r1
 5a0:	d1 04       	cpc	r13, r1
 5a2:	e1 04       	cpc	r14, r1
 5a4:	f1 04       	cpc	r15, r1
 5a6:	29 f7       	brne	.-54     	; 0x572 <CLCD_vWriteNumber+0x4e>
		{
			Local_flag=(number%10)+(Local_flag*10);
			number/=10;
		}
		while(Local_flag!=1)
 5a8:	81 30       	cpi	r24, 0x01	; 1
 5aa:	91 05       	cpc	r25, r1
 5ac:	a1 05       	cpc	r26, r1
 5ae:	b1 05       	cpc	r27, r1
 5b0:	09 f1       	breq	.+66     	; 0x5f4 <CLCD_vWriteNumber+0xd0>
		{
			CLCD_vSendData((Local_flag%10)+48); // 48 ASCii to 0
 5b2:	0f 2e       	mov	r0, r31
 5b4:	fa e0       	ldi	r31, 0x0A	; 10
 5b6:	4f 2e       	mov	r4, r31
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	5f 2e       	mov	r5, r31
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	6f 2e       	mov	r6, r31
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	7f 2e       	mov	r7, r31
 5c4:	f0 2d       	mov	r31, r0
 5c6:	bc 01       	movw	r22, r24
 5c8:	cd 01       	movw	r24, r26
 5ca:	a3 01       	movw	r20, r6
 5cc:	92 01       	movw	r18, r4
 5ce:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__udivmodsi4>
 5d2:	82 2e       	mov	r8, r18
 5d4:	c3 2e       	mov	r12, r19
 5d6:	c4 2f       	mov	r28, r20
 5d8:	d5 2f       	mov	r29, r21
 5da:	86 2f       	mov	r24, r22
 5dc:	80 5d       	subi	r24, 0xD0	; 208
 5de:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <CLCD_vSendData>
			Local_flag/=10;
 5e2:	88 2d       	mov	r24, r8
 5e4:	9c 2d       	mov	r25, r12
 5e6:	ac 2f       	mov	r26, r28
 5e8:	bd 2f       	mov	r27, r29
		while(number!=0)
		{
			Local_flag=(number%10)+(Local_flag*10);
			number/=10;
		}
		while(Local_flag!=1)
 5ea:	81 30       	cpi	r24, 0x01	; 1
 5ec:	91 05       	cpc	r25, r1
 5ee:	a1 05       	cpc	r26, r1
 5f0:	b1 05       	cpc	r27, r1
 5f2:	49 f7       	brne	.-46     	; 0x5c6 <CLCD_vWriteNumber+0xa2>
		{
			CLCD_vSendData((Local_flag%10)+48); // 48 ASCii to 0
			Local_flag/=10;
		}
	}
}
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	ff 90       	pop	r15
 5fa:	ef 90       	pop	r14
 5fc:	df 90       	pop	r13
 5fe:	cf 90       	pop	r12
 600:	bf 90       	pop	r11
 602:	af 90       	pop	r10
 604:	9f 90       	pop	r9
 606:	8f 90       	pop	r8
 608:	7f 90       	pop	r7
 60a:	6f 90       	pop	r6
 60c:	5f 90       	pop	r5
 60e:	4f 90       	pop	r4
 610:	08 95       	ret

00000612 <CLCD_vGoToXY>:


void CLCD_vGoToXY(u8 x_pos ,u8 y_pos)
{
	u8 Local_Address=0;
	if (x_pos==0)
 612:	88 23       	and	r24, r24
 614:	29 f0       	breq	.+10     	; 0x620 <CLCD_vGoToXY+0xe>
	{
		Local_Address=y_pos;
	}
	else if(x_pos==1)
 616:	81 30       	cpi	r24, 0x01	; 1
 618:	29 f4       	brne	.+10     	; 0x624 <CLCD_vGoToXY+0x12>
	{
		Local_Address=y_pos+ 0x40;
 61a:	86 2f       	mov	r24, r22
 61c:	80 5c       	subi	r24, 0xC0	; 192
 61e:	03 c0       	rjmp	.+6      	; 0x626 <CLCD_vGoToXY+0x14>
void CLCD_vGoToXY(u8 x_pos ,u8 y_pos)
{
	u8 Local_Address=0;
	if (x_pos==0)
	{
		Local_Address=y_pos;
 620:	86 2f       	mov	r24, r22
 622:	01 c0       	rjmp	.+2      	; 0x626 <CLCD_vGoToXY+0x14>
}


void CLCD_vGoToXY(u8 x_pos ,u8 y_pos)
{
	u8 Local_Address=0;
 624:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_Address=y_pos+ 0x40;
	}
	else{}
		
	CLCD_vSendCommand(Local_Address+128);
 626:	80 58       	subi	r24, 0x80	; 128
 628:	0e 94 15 02 	call	0x42a	; 0x42a <CLCD_vSendCommand>
}
 62c:	08 95       	ret

0000062e <CLCD_vWriteSpecialCharacter>:


void CLCD_vWriteSpecialCharacter(u8 *pattern, u8 pattern_no , u8 x_pos , u8 y_pos)
{
 62e:	df 92       	push	r13
 630:	ef 92       	push	r14
 632:	ff 92       	push	r15
 634:	0f 93       	push	r16
 636:	1f 93       	push	r17
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
 63c:	08 2f       	mov	r16, r24
 63e:	f9 2e       	mov	r15, r25
 640:	16 2f       	mov	r17, r22
 642:	e4 2e       	mov	r14, r20
 644:	d2 2e       	mov	r13, r18
	u8 Local_CGaddress=0;
	u8 Local_counter=0;
	/*Calculate CG RAM Address : each Block = 8 bytes */
	 Local_CGaddress=pattern_no*8;
 646:	86 2f       	mov	r24, r22
 648:	88 0f       	add	r24, r24
 64a:	88 0f       	add	r24, r24
 64c:	88 0f       	add	r24, r24
	/*Send CG Ram Address To Locating Where Write  Pattern Value*/
	CLCD_vSendCommand(64+Local_CGaddress);
 64e:	80 5c       	subi	r24, 0xC0	; 192
 650:	0e 94 15 02 	call	0x42a	; 0x42a <CLCD_vSendCommand>
 654:	c0 2f       	mov	r28, r16
 656:	df 2d       	mov	r29, r15
	/*Write The Value Pattern In CG RAM*/
	for (Local_counter=0;Local_counter<8;Local_counter++)
 658:	00 e0       	ldi	r16, 0x00	; 0
	{
		CLCD_vSendData(pattern[Local_counter]);
 65a:	89 91       	ld	r24, Y+
 65c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <CLCD_vSendData>
	/*Calculate CG RAM Address : each Block = 8 bytes */
	 Local_CGaddress=pattern_no*8;
	/*Send CG Ram Address To Locating Where Write  Pattern Value*/
	CLCD_vSendCommand(64+Local_CGaddress);
	/*Write The Value Pattern In CG RAM*/
	for (Local_counter=0;Local_counter<8;Local_counter++)
 660:	0f 5f       	subi	r16, 0xFF	; 255
 662:	08 30       	cpi	r16, 0x08	; 8
 664:	d1 f7       	brne	.-12     	; 0x65a <CLCD_vWriteSpecialCharacter+0x2c>
	{
		CLCD_vSendData(pattern[Local_counter]);
	}
	/*Go back DD RAM to display the pattern*/
	CLCD_vGoToXY(x_pos,y_pos);
 666:	8e 2d       	mov	r24, r14
 668:	6d 2d       	mov	r22, r13
 66a:	0e 94 09 03 	call	0x612	; 0x612 <CLCD_vGoToXY>
	/*Display the pattern*/
	CLCD_vSendData(pattern_no);
 66e:	81 2f       	mov	r24, r17
 670:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <CLCD_vSendData>
	
}
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	0f 91       	pop	r16
 67c:	ff 90       	pop	r15
 67e:	ef 90       	pop	r14
 680:	df 90       	pop	r13
 682:	08 95       	ret

00000684 <CLCD_vClearscreen>:

void CLCD_vClearscreen()
{
	CLCD_vSendCommand(CLR_SCREEN);
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	0e 94 15 02 	call	0x42a	; 0x42a <CLCD_vSendCommand>
 68a:	8f e1       	ldi	r24, 0x1F	; 31
 68c:	9e e4       	ldi	r25, 0x4E	; 78
 68e:	01 97       	sbiw	r24, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <CLCD_vClearscreen+0xa>
 692:	00 c0       	rjmp	.+0      	; 0x694 <CLCD_vClearscreen+0x10>
 694:	00 00       	nop
	_delay_ms(10);
}
 696:	08 95       	ret

00000698 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 port, u8 pin , u8 dir)
{
	u8 Local_u8ErrorState=0;
	if(pin<=DIO_u8PIN7)
 698:	68 30       	cpi	r22, 0x08	; 8
 69a:	08 f0       	brcs	.+2      	; 0x69e <DIO_u8SetPinDirection+0x6>
 69c:	96 c0       	rjmp	.+300    	; 0x7ca <DIO_u8SetPinDirection+0x132>
	{
		if (dir==DIO_u8PIN_INPUT)
 69e:	44 23       	and	r20, r20
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <DIO_u8SetPinDirection+0xc>
 6a2:	4a c0       	rjmp	.+148    	; 0x738 <DIO_u8SetPinDirection+0xa0>
		{
			switch(port)
 6a4:	82 30       	cpi	r24, 0x02	; 2
 6a6:	d9 f0       	breq	.+54     	; 0x6de <DIO_u8SetPinDirection+0x46>
 6a8:	83 30       	cpi	r24, 0x03	; 3
 6aa:	20 f4       	brcc	.+8      	; 0x6b4 <DIO_u8SetPinDirection+0x1c>
 6ac:	81 30       	cpi	r24, 0x01	; 1
 6ae:	09 f0       	breq	.+2      	; 0x6b2 <DIO_u8SetPinDirection+0x1a>
 6b0:	8e c0       	rjmp	.+284    	; 0x7ce <DIO_u8SetPinDirection+0x136>
 6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <DIO_u8SetPinDirection+0x28>
 6b4:	83 30       	cpi	r24, 0x03	; 3
 6b6:	11 f1       	breq	.+68     	; 0x6fc <DIO_u8SetPinDirection+0x64>
 6b8:	84 30       	cpi	r24, 0x04	; 4
 6ba:	09 f0       	breq	.+2      	; 0x6be <DIO_u8SetPinDirection+0x26>
 6bc:	88 c0       	rjmp	.+272    	; 0x7ce <DIO_u8SetPinDirection+0x136>
 6be:	2d c0       	rjmp	.+90     	; 0x71a <DIO_u8SetPinDirection+0x82>
			{
				case DIO_u8PORTA : CLEAR_BIT(DDRA,pin); break;
 6c0:	2a b3       	in	r18, 0x1a	; 26
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	ac 01       	movw	r20, r24
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <DIO_u8SetPinDirection+0x36>
 6ca:	44 0f       	add	r20, r20
 6cc:	55 1f       	adc	r21, r21
 6ce:	6a 95       	dec	r22
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <DIO_u8SetPinDirection+0x32>
 6d2:	ba 01       	movw	r22, r20
 6d4:	60 95       	com	r22
 6d6:	62 23       	and	r22, r18
 6d8:	6a bb       	out	0x1a, r22	; 26



u8 DIO_u8SetPinDirection(u8 port, u8 pin , u8 dir)
{
	u8 Local_u8ErrorState=0;
 6da:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (dir==DIO_u8PIN_INPUT)
		{
			switch(port)
			{
				case DIO_u8PORTA : CLEAR_BIT(DDRA,pin); break;
 6dc:	08 95       	ret
				case DIO_u8PORTB : CLEAR_BIT(DDRB,pin); break;
 6de:	27 b3       	in	r18, 0x17	; 23
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	ac 01       	movw	r20, r24
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_u8SetPinDirection+0x54>
 6e8:	44 0f       	add	r20, r20
 6ea:	55 1f       	adc	r21, r21
 6ec:	6a 95       	dec	r22
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_u8SetPinDirection+0x50>
 6f0:	ba 01       	movw	r22, r20
 6f2:	60 95       	com	r22
 6f4:	62 23       	and	r22, r18
 6f6:	67 bb       	out	0x17, r22	; 23



u8 DIO_u8SetPinDirection(u8 port, u8 pin , u8 dir)
{
	u8 Local_u8ErrorState=0;
 6f8:	80 e0       	ldi	r24, 0x00	; 0
		if (dir==DIO_u8PIN_INPUT)
		{
			switch(port)
			{
				case DIO_u8PORTA : CLEAR_BIT(DDRA,pin); break;
				case DIO_u8PORTB : CLEAR_BIT(DDRB,pin); break;
 6fa:	08 95       	ret
				case DIO_u8PORTC : CLEAR_BIT(DDRC,pin); break;
 6fc:	24 b3       	in	r18, 0x14	; 20
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	ac 01       	movw	r20, r24
 704:	02 c0       	rjmp	.+4      	; 0x70a <DIO_u8SetPinDirection+0x72>
 706:	44 0f       	add	r20, r20
 708:	55 1f       	adc	r21, r21
 70a:	6a 95       	dec	r22
 70c:	e2 f7       	brpl	.-8      	; 0x706 <DIO_u8SetPinDirection+0x6e>
 70e:	ba 01       	movw	r22, r20
 710:	60 95       	com	r22
 712:	62 23       	and	r22, r18
 714:	64 bb       	out	0x14, r22	; 20



u8 DIO_u8SetPinDirection(u8 port, u8 pin , u8 dir)
{
	u8 Local_u8ErrorState=0;
 716:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(port)
			{
				case DIO_u8PORTA : CLEAR_BIT(DDRA,pin); break;
				case DIO_u8PORTB : CLEAR_BIT(DDRB,pin); break;
				case DIO_u8PORTC : CLEAR_BIT(DDRC,pin); break;
 718:	08 95       	ret
				case DIO_u8PORTD : CLEAR_BIT(DDRD,pin); break;
 71a:	21 b3       	in	r18, 0x11	; 17
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	ac 01       	movw	r20, r24
 722:	02 c0       	rjmp	.+4      	; 0x728 <DIO_u8SetPinDirection+0x90>
 724:	44 0f       	add	r20, r20
 726:	55 1f       	adc	r21, r21
 728:	6a 95       	dec	r22
 72a:	e2 f7       	brpl	.-8      	; 0x724 <DIO_u8SetPinDirection+0x8c>
 72c:	ba 01       	movw	r22, r20
 72e:	60 95       	com	r22
 730:	62 23       	and	r22, r18
 732:	61 bb       	out	0x11, r22	; 17



u8 DIO_u8SetPinDirection(u8 port, u8 pin , u8 dir)
{
	u8 Local_u8ErrorState=0;
 734:	80 e0       	ldi	r24, 0x00	; 0
			switch(port)
			{
				case DIO_u8PORTA : CLEAR_BIT(DDRA,pin); break;
				case DIO_u8PORTB : CLEAR_BIT(DDRB,pin); break;
				case DIO_u8PORTC : CLEAR_BIT(DDRC,pin); break;
				case DIO_u8PORTD : CLEAR_BIT(DDRD,pin); break;
 736:	08 95       	ret
				default:Local_u8ErrorState=1; break;
			}
		}	
				
		else if(dir==DIO_u8PIN_OUTPUT)
 738:	41 30       	cpi	r20, 0x01	; 1
 73a:	09 f0       	breq	.+2      	; 0x73e <DIO_u8SetPinDirection+0xa6>
 73c:	4a c0       	rjmp	.+148    	; 0x7d2 <DIO_u8SetPinDirection+0x13a>
		{
			switch(port)
 73e:	82 30       	cpi	r24, 0x02	; 2
 740:	d1 f0       	breq	.+52     	; 0x776 <DIO_u8SetPinDirection+0xde>
 742:	83 30       	cpi	r24, 0x03	; 3
 744:	20 f4       	brcc	.+8      	; 0x74e <DIO_u8SetPinDirection+0xb6>
 746:	81 30       	cpi	r24, 0x01	; 1
 748:	09 f0       	breq	.+2      	; 0x74c <DIO_u8SetPinDirection+0xb4>
 74a:	45 c0       	rjmp	.+138    	; 0x7d6 <DIO_u8SetPinDirection+0x13e>
 74c:	06 c0       	rjmp	.+12     	; 0x75a <DIO_u8SetPinDirection+0xc2>
 74e:	83 30       	cpi	r24, 0x03	; 3
 750:	01 f1       	breq	.+64     	; 0x792 <DIO_u8SetPinDirection+0xfa>
 752:	84 30       	cpi	r24, 0x04	; 4
 754:	09 f0       	breq	.+2      	; 0x758 <DIO_u8SetPinDirection+0xc0>
 756:	3f c0       	rjmp	.+126    	; 0x7d6 <DIO_u8SetPinDirection+0x13e>
 758:	2a c0       	rjmp	.+84     	; 0x7ae <DIO_u8SetPinDirection+0x116>
			{
				case DIO_u8PORTA : SET_BIT(DDRA,pin); break;
 75a:	2a b3       	in	r18, 0x1a	; 26
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	ac 01       	movw	r20, r24
 762:	02 c0       	rjmp	.+4      	; 0x768 <DIO_u8SetPinDirection+0xd0>
 764:	44 0f       	add	r20, r20
 766:	55 1f       	adc	r21, r21
 768:	6a 95       	dec	r22
 76a:	e2 f7       	brpl	.-8      	; 0x764 <DIO_u8SetPinDirection+0xcc>
 76c:	ba 01       	movw	r22, r20
 76e:	62 2b       	or	r22, r18
 770:	6a bb       	out	0x1a, r22	; 26



u8 DIO_u8SetPinDirection(u8 port, u8 pin , u8 dir)
{
	u8 Local_u8ErrorState=0;
 772:	80 e0       	ldi	r24, 0x00	; 0
				
		else if(dir==DIO_u8PIN_OUTPUT)
		{
			switch(port)
			{
				case DIO_u8PORTA : SET_BIT(DDRA,pin); break;
 774:	08 95       	ret
				case DIO_u8PORTB : SET_BIT(DDRB,pin); break;
 776:	27 b3       	in	r18, 0x17	; 23
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	ac 01       	movw	r20, r24
 77e:	02 c0       	rjmp	.+4      	; 0x784 <DIO_u8SetPinDirection+0xec>
 780:	44 0f       	add	r20, r20
 782:	55 1f       	adc	r21, r21
 784:	6a 95       	dec	r22
 786:	e2 f7       	brpl	.-8      	; 0x780 <DIO_u8SetPinDirection+0xe8>
 788:	ba 01       	movw	r22, r20
 78a:	62 2b       	or	r22, r18
 78c:	67 bb       	out	0x17, r22	; 23



u8 DIO_u8SetPinDirection(u8 port, u8 pin , u8 dir)
{
	u8 Local_u8ErrorState=0;
 78e:	80 e0       	ldi	r24, 0x00	; 0
		else if(dir==DIO_u8PIN_OUTPUT)
		{
			switch(port)
			{
				case DIO_u8PORTA : SET_BIT(DDRA,pin); break;
				case DIO_u8PORTB : SET_BIT(DDRB,pin); break;
 790:	08 95       	ret
				case DIO_u8PORTC : SET_BIT(DDRC,pin); break;
 792:	24 b3       	in	r18, 0x14	; 20
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	ac 01       	movw	r20, r24
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_u8SetPinDirection+0x108>
 79c:	44 0f       	add	r20, r20
 79e:	55 1f       	adc	r21, r21
 7a0:	6a 95       	dec	r22
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <DIO_u8SetPinDirection+0x104>
 7a4:	ba 01       	movw	r22, r20
 7a6:	62 2b       	or	r22, r18
 7a8:	64 bb       	out	0x14, r22	; 20



u8 DIO_u8SetPinDirection(u8 port, u8 pin , u8 dir)
{
	u8 Local_u8ErrorState=0;
 7aa:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(port)
			{
				case DIO_u8PORTA : SET_BIT(DDRA,pin); break;
				case DIO_u8PORTB : SET_BIT(DDRB,pin); break;
				case DIO_u8PORTC : SET_BIT(DDRC,pin); break;
 7ac:	08 95       	ret
				case DIO_u8PORTD : SET_BIT(DDRD,pin); break;
 7ae:	21 b3       	in	r18, 0x11	; 17
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	ac 01       	movw	r20, r24
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <DIO_u8SetPinDirection+0x124>
 7b8:	44 0f       	add	r20, r20
 7ba:	55 1f       	adc	r21, r21
 7bc:	6a 95       	dec	r22
 7be:	e2 f7       	brpl	.-8      	; 0x7b8 <DIO_u8SetPinDirection+0x120>
 7c0:	ba 01       	movw	r22, r20
 7c2:	62 2b       	or	r22, r18
 7c4:	61 bb       	out	0x11, r22	; 17



u8 DIO_u8SetPinDirection(u8 port, u8 pin , u8 dir)
{
	u8 Local_u8ErrorState=0;
 7c6:	80 e0       	ldi	r24, 0x00	; 0
			switch(port)
			{
				case DIO_u8PORTA : SET_BIT(DDRA,pin); break;
				case DIO_u8PORTB : SET_BIT(DDRB,pin); break;
				case DIO_u8PORTC : SET_BIT(DDRC,pin); break;
				case DIO_u8PORTD : SET_BIT(DDRD,pin); break;
 7c8:	08 95       	ret
		}	
									
		
		else{Local_u8ErrorState=1;}
	}
	else{Local_u8ErrorState=1;}
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	08 95       	ret
			{
				case DIO_u8PORTA : CLEAR_BIT(DDRA,pin); break;
				case DIO_u8PORTB : CLEAR_BIT(DDRB,pin); break;
				case DIO_u8PORTC : CLEAR_BIT(DDRC,pin); break;
				case DIO_u8PORTD : CLEAR_BIT(DDRD,pin); break;
				default:Local_u8ErrorState=1; break;
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	08 95       	ret
				default:Local_u8ErrorState=1; break;
			}
		}	
									
		
		else{Local_u8ErrorState=1;}
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	08 95       	ret
			{
				case DIO_u8PORTA : SET_BIT(DDRA,pin); break;
				case DIO_u8PORTB : SET_BIT(DDRB,pin); break;
				case DIO_u8PORTC : SET_BIT(DDRC,pin); break;
				case DIO_u8PORTD : SET_BIT(DDRD,pin); break;
				default:Local_u8ErrorState=1; break;
 7d6:	81 e0       	ldi	r24, 0x01	; 1
		
		else{Local_u8ErrorState=1;}
	}
	else{Local_u8ErrorState=1;}
		return Local_u8ErrorState;
}
 7d8:	08 95       	ret

000007da <DIO_u8SetportDirection>:


u8 DIO_u8SetportDirection(u8 port, u8 dir)
{
	u8 Local_u8ErrorState=0;
		switch(port)
 7da:	82 30       	cpi	r24, 0x02	; 2
 7dc:	69 f0       	breq	.+26     	; 0x7f8 <DIO_u8SetportDirection+0x1e>
 7de:	83 30       	cpi	r24, 0x03	; 3
 7e0:	18 f4       	brcc	.+6      	; 0x7e8 <DIO_u8SetportDirection+0xe>
 7e2:	81 30       	cpi	r24, 0x01	; 1
 7e4:	91 f4       	brne	.+36     	; 0x80a <DIO_u8SetportDirection+0x30>
 7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <DIO_u8SetportDirection+0x18>
 7e8:	83 30       	cpi	r24, 0x03	; 3
 7ea:	49 f0       	breq	.+18     	; 0x7fe <DIO_u8SetportDirection+0x24>
 7ec:	84 30       	cpi	r24, 0x04	; 4
 7ee:	69 f4       	brne	.+26     	; 0x80a <DIO_u8SetportDirection+0x30>
 7f0:	09 c0       	rjmp	.+18     	; 0x804 <DIO_u8SetportDirection+0x2a>
		{
			case DIO_u8PORTA : DDRA=dir; break;
 7f2:	6a bb       	out	0x1a, r22	; 26



u8 DIO_u8SetportDirection(u8 port, u8 dir)
{
	u8 Local_u8ErrorState=0;
 7f4:	80 e0       	ldi	r24, 0x00	; 0
		switch(port)
		{
			case DIO_u8PORTA : DDRA=dir; break;
 7f6:	08 95       	ret
			case DIO_u8PORTB : DDRB=dir; break;
 7f8:	67 bb       	out	0x17, r22	; 23



u8 DIO_u8SetportDirection(u8 port, u8 dir)
{
	u8 Local_u8ErrorState=0;
 7fa:	80 e0       	ldi	r24, 0x00	; 0
		switch(port)
		{
			case DIO_u8PORTA : DDRA=dir; break;
			case DIO_u8PORTB : DDRB=dir; break;
 7fc:	08 95       	ret
			case DIO_u8PORTC : DDRC=dir; break;
 7fe:	64 bb       	out	0x14, r22	; 20



u8 DIO_u8SetportDirection(u8 port, u8 dir)
{
	u8 Local_u8ErrorState=0;
 800:	80 e0       	ldi	r24, 0x00	; 0
		switch(port)
		{
			case DIO_u8PORTA : DDRA=dir; break;
			case DIO_u8PORTB : DDRB=dir; break;
			case DIO_u8PORTC : DDRC=dir; break;
 802:	08 95       	ret
			case DIO_u8PORTD : DDRD=dir; break;
 804:	61 bb       	out	0x11, r22	; 17



u8 DIO_u8SetportDirection(u8 port, u8 dir)
{
	u8 Local_u8ErrorState=0;
 806:	80 e0       	ldi	r24, 0x00	; 0
		switch(port)
		{
			case DIO_u8PORTA : DDRA=dir; break;
			case DIO_u8PORTB : DDRB=dir; break;
			case DIO_u8PORTC : DDRC=dir; break;
			case DIO_u8PORTD : DDRD=dir; break;
 808:	08 95       	ret
			default:Local_u8ErrorState=1; break;
 80a:	81 e0       	ldi	r24, 0x01	; 1
		}
	
	
	return Local_u8ErrorState;
}
 80c:	08 95       	ret

0000080e <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 port, u8 pin , u8 val)
{
	u8 Local_u8ErrorState=0;
	if (pin<=DIO_u8PIN7)
 80e:	68 30       	cpi	r22, 0x08	; 8
 810:	08 f0       	brcs	.+2      	; 0x814 <DIO_u8SetPinValue+0x6>
 812:	96 c0       	rjmp	.+300    	; 0x940 <__stack+0xe1>
	{
		if (val==DIO_u8PIN_LOW)
 814:	44 23       	and	r20, r20
 816:	09 f0       	breq	.+2      	; 0x81a <DIO_u8SetPinValue+0xc>
 818:	4a c0       	rjmp	.+148    	; 0x8ae <__stack+0x4f>
		{
			switch(port)
 81a:	82 30       	cpi	r24, 0x02	; 2
 81c:	d9 f0       	breq	.+54     	; 0x854 <DIO_u8SetPinValue+0x46>
 81e:	83 30       	cpi	r24, 0x03	; 3
 820:	20 f4       	brcc	.+8      	; 0x82a <DIO_u8SetPinValue+0x1c>
 822:	81 30       	cpi	r24, 0x01	; 1
 824:	09 f0       	breq	.+2      	; 0x828 <DIO_u8SetPinValue+0x1a>
 826:	8e c0       	rjmp	.+284    	; 0x944 <__stack+0xe5>
 828:	06 c0       	rjmp	.+12     	; 0x836 <DIO_u8SetPinValue+0x28>
 82a:	83 30       	cpi	r24, 0x03	; 3
 82c:	11 f1       	breq	.+68     	; 0x872 <__stack+0x13>
 82e:	84 30       	cpi	r24, 0x04	; 4
 830:	09 f0       	breq	.+2      	; 0x834 <DIO_u8SetPinValue+0x26>
 832:	88 c0       	rjmp	.+272    	; 0x944 <__stack+0xe5>
 834:	2d c0       	rjmp	.+90     	; 0x890 <__stack+0x31>
			{
				case DIO_u8PORTA :CLEAR_BIT(PORTA,pin); break;
 836:	2b b3       	in	r18, 0x1b	; 27
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	ac 01       	movw	r20, r24
 83e:	02 c0       	rjmp	.+4      	; 0x844 <DIO_u8SetPinValue+0x36>
 840:	44 0f       	add	r20, r20
 842:	55 1f       	adc	r21, r21
 844:	6a 95       	dec	r22
 846:	e2 f7       	brpl	.-8      	; 0x840 <DIO_u8SetPinValue+0x32>
 848:	ba 01       	movw	r22, r20
 84a:	60 95       	com	r22
 84c:	62 23       	and	r22, r18
 84e:	6b bb       	out	0x1b, r22	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 port, u8 pin , u8 val)
{
	u8 Local_u8ErrorState=0;
 850:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (val==DIO_u8PIN_LOW)
		{
			switch(port)
			{
				case DIO_u8PORTA :CLEAR_BIT(PORTA,pin); break;
 852:	08 95       	ret
				case DIO_u8PORTB :CLEAR_BIT(PORTB,pin); break;
 854:	28 b3       	in	r18, 0x18	; 24
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	ac 01       	movw	r20, r24
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
 85e:	44 0f       	add	r20, r20
 860:	55 1f       	adc	r21, r21
 862:	6a 95       	dec	r22
 864:	e2 f7       	brpl	.-8      	; 0x85e <DIO_u8SetPinValue+0x50>
 866:	ba 01       	movw	r22, r20
 868:	60 95       	com	r22
 86a:	62 23       	and	r22, r18
 86c:	68 bb       	out	0x18, r22	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 port, u8 pin , u8 val)
{
	u8 Local_u8ErrorState=0;
 86e:	80 e0       	ldi	r24, 0x00	; 0
		if (val==DIO_u8PIN_LOW)
		{
			switch(port)
			{
				case DIO_u8PORTA :CLEAR_BIT(PORTA,pin); break;
				case DIO_u8PORTB :CLEAR_BIT(PORTB,pin); break;
 870:	08 95       	ret
				case DIO_u8PORTC :CLEAR_BIT(PORTC,pin); break;
 872:	25 b3       	in	r18, 0x15	; 21
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	ac 01       	movw	r20, r24
 87a:	02 c0       	rjmp	.+4      	; 0x880 <__stack+0x21>
 87c:	44 0f       	add	r20, r20
 87e:	55 1f       	adc	r21, r21
 880:	6a 95       	dec	r22
 882:	e2 f7       	brpl	.-8      	; 0x87c <__stack+0x1d>
 884:	ba 01       	movw	r22, r20
 886:	60 95       	com	r22
 888:	62 23       	and	r22, r18
 88a:	65 bb       	out	0x15, r22	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 port, u8 pin , u8 val)
{
	u8 Local_u8ErrorState=0;
 88c:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(port)
			{
				case DIO_u8PORTA :CLEAR_BIT(PORTA,pin); break;
				case DIO_u8PORTB :CLEAR_BIT(PORTB,pin); break;
				case DIO_u8PORTC :CLEAR_BIT(PORTC,pin); break;
 88e:	08 95       	ret
				case DIO_u8PORTD :CLEAR_BIT(PORTD,pin); break;
 890:	22 b3       	in	r18, 0x12	; 18
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	ac 01       	movw	r20, r24
 898:	02 c0       	rjmp	.+4      	; 0x89e <__stack+0x3f>
 89a:	44 0f       	add	r20, r20
 89c:	55 1f       	adc	r21, r21
 89e:	6a 95       	dec	r22
 8a0:	e2 f7       	brpl	.-8      	; 0x89a <__stack+0x3b>
 8a2:	ba 01       	movw	r22, r20
 8a4:	60 95       	com	r22
 8a6:	62 23       	and	r22, r18
 8a8:	62 bb       	out	0x12, r22	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 port, u8 pin , u8 val)
{
	u8 Local_u8ErrorState=0;
 8aa:	80 e0       	ldi	r24, 0x00	; 0
			switch(port)
			{
				case DIO_u8PORTA :CLEAR_BIT(PORTA,pin); break;
				case DIO_u8PORTB :CLEAR_BIT(PORTB,pin); break;
				case DIO_u8PORTC :CLEAR_BIT(PORTC,pin); break;
				case DIO_u8PORTD :CLEAR_BIT(PORTD,pin); break;
 8ac:	08 95       	ret
				default:Local_u8ErrorState=1; break;
			}
			
		}
		else if (val==DIO_u8PIN_HIGH)
 8ae:	41 30       	cpi	r20, 0x01	; 1
 8b0:	09 f0       	breq	.+2      	; 0x8b4 <__stack+0x55>
 8b2:	4a c0       	rjmp	.+148    	; 0x948 <__stack+0xe9>
		{
			switch(port)
 8b4:	82 30       	cpi	r24, 0x02	; 2
 8b6:	d1 f0       	breq	.+52     	; 0x8ec <__stack+0x8d>
 8b8:	83 30       	cpi	r24, 0x03	; 3
 8ba:	20 f4       	brcc	.+8      	; 0x8c4 <__stack+0x65>
 8bc:	81 30       	cpi	r24, 0x01	; 1
 8be:	09 f0       	breq	.+2      	; 0x8c2 <__stack+0x63>
 8c0:	45 c0       	rjmp	.+138    	; 0x94c <__stack+0xed>
 8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <__stack+0x71>
 8c4:	83 30       	cpi	r24, 0x03	; 3
 8c6:	01 f1       	breq	.+64     	; 0x908 <__stack+0xa9>
 8c8:	84 30       	cpi	r24, 0x04	; 4
 8ca:	09 f0       	breq	.+2      	; 0x8ce <__stack+0x6f>
 8cc:	3f c0       	rjmp	.+126    	; 0x94c <__stack+0xed>
 8ce:	2a c0       	rjmp	.+84     	; 0x924 <__stack+0xc5>
			{
				case DIO_u8PORTA :SET_BIT(PORTA,pin); break;
 8d0:	2b b3       	in	r18, 0x1b	; 27
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	ac 01       	movw	r20, r24
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <__stack+0x7f>
 8da:	44 0f       	add	r20, r20
 8dc:	55 1f       	adc	r21, r21
 8de:	6a 95       	dec	r22
 8e0:	e2 f7       	brpl	.-8      	; 0x8da <__stack+0x7b>
 8e2:	ba 01       	movw	r22, r20
 8e4:	62 2b       	or	r22, r18
 8e6:	6b bb       	out	0x1b, r22	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 port, u8 pin , u8 val)
{
	u8 Local_u8ErrorState=0;
 8e8:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if (val==DIO_u8PIN_HIGH)
		{
			switch(port)
			{
				case DIO_u8PORTA :SET_BIT(PORTA,pin); break;
 8ea:	08 95       	ret
				case DIO_u8PORTB :SET_BIT(PORTB,pin); break;
 8ec:	28 b3       	in	r18, 0x18	; 24
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	ac 01       	movw	r20, r24
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <__stack+0x9b>
 8f6:	44 0f       	add	r20, r20
 8f8:	55 1f       	adc	r21, r21
 8fa:	6a 95       	dec	r22
 8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <__stack+0x97>
 8fe:	ba 01       	movw	r22, r20
 900:	62 2b       	or	r22, r18
 902:	68 bb       	out	0x18, r22	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 port, u8 pin , u8 val)
{
	u8 Local_u8ErrorState=0;
 904:	80 e0       	ldi	r24, 0x00	; 0
		else if (val==DIO_u8PIN_HIGH)
		{
			switch(port)
			{
				case DIO_u8PORTA :SET_BIT(PORTA,pin); break;
				case DIO_u8PORTB :SET_BIT(PORTB,pin); break;
 906:	08 95       	ret
				case DIO_u8PORTC :SET_BIT(PORTC,pin); break;
 908:	25 b3       	in	r18, 0x15	; 21
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	ac 01       	movw	r20, r24
 910:	02 c0       	rjmp	.+4      	; 0x916 <__stack+0xb7>
 912:	44 0f       	add	r20, r20
 914:	55 1f       	adc	r21, r21
 916:	6a 95       	dec	r22
 918:	e2 f7       	brpl	.-8      	; 0x912 <__stack+0xb3>
 91a:	ba 01       	movw	r22, r20
 91c:	62 2b       	or	r22, r18
 91e:	65 bb       	out	0x15, r22	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 port, u8 pin , u8 val)
{
	u8 Local_u8ErrorState=0;
 920:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(port)
			{
				case DIO_u8PORTA :SET_BIT(PORTA,pin); break;
				case DIO_u8PORTB :SET_BIT(PORTB,pin); break;
				case DIO_u8PORTC :SET_BIT(PORTC,pin); break;
 922:	08 95       	ret
				case DIO_u8PORTD :SET_BIT(PORTD,pin); break;
 924:	22 b3       	in	r18, 0x12	; 18
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	ac 01       	movw	r20, r24
 92c:	02 c0       	rjmp	.+4      	; 0x932 <__stack+0xd3>
 92e:	44 0f       	add	r20, r20
 930:	55 1f       	adc	r21, r21
 932:	6a 95       	dec	r22
 934:	e2 f7       	brpl	.-8      	; 0x92e <__stack+0xcf>
 936:	ba 01       	movw	r22, r20
 938:	62 2b       	or	r22, r18
 93a:	62 bb       	out	0x12, r22	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 port, u8 pin , u8 val)
{
	u8 Local_u8ErrorState=0;
 93c:	80 e0       	ldi	r24, 0x00	; 0
			switch(port)
			{
				case DIO_u8PORTA :SET_BIT(PORTA,pin); break;
				case DIO_u8PORTB :SET_BIT(PORTB,pin); break;
				case DIO_u8PORTC :SET_BIT(PORTC,pin); break;
				case DIO_u8PORTD :SET_BIT(PORTD,pin); break;
 93e:	08 95       	ret
			}
		}
		else{Local_u8ErrorState=1;}
		
	}
	else{Local_u8ErrorState=1;}
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	08 95       	ret
			{
				case DIO_u8PORTA :CLEAR_BIT(PORTA,pin); break;
				case DIO_u8PORTB :CLEAR_BIT(PORTB,pin); break;
				case DIO_u8PORTC :CLEAR_BIT(PORTC,pin); break;
				case DIO_u8PORTD :CLEAR_BIT(PORTD,pin); break;
				default:Local_u8ErrorState=1; break;
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	08 95       	ret
				case DIO_u8PORTC :SET_BIT(PORTC,pin); break;
				case DIO_u8PORTD :SET_BIT(PORTD,pin); break;
				default:Local_u8ErrorState=1; break;
			}
		}
		else{Local_u8ErrorState=1;}
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	08 95       	ret
			{
				case DIO_u8PORTA :SET_BIT(PORTA,pin); break;
				case DIO_u8PORTB :SET_BIT(PORTB,pin); break;
				case DIO_u8PORTC :SET_BIT(PORTC,pin); break;
				case DIO_u8PORTD :SET_BIT(PORTD,pin); break;
				default:Local_u8ErrorState=1; break;
 94c:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	else{Local_u8ErrorState=1;}
	
	return Local_u8ErrorState;
}
 94e:	08 95       	ret

00000950 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 port, u8 val)
{
	u8 Local_u8ErrorState=0;
	switch(port)
 950:	82 30       	cpi	r24, 0x02	; 2
 952:	69 f0       	breq	.+26     	; 0x96e <DIO_u8SetPortValue+0x1e>
 954:	83 30       	cpi	r24, 0x03	; 3
 956:	18 f4       	brcc	.+6      	; 0x95e <DIO_u8SetPortValue+0xe>
 958:	81 30       	cpi	r24, 0x01	; 1
 95a:	91 f4       	brne	.+36     	; 0x980 <DIO_u8SetPortValue+0x30>
 95c:	05 c0       	rjmp	.+10     	; 0x968 <DIO_u8SetPortValue+0x18>
 95e:	83 30       	cpi	r24, 0x03	; 3
 960:	49 f0       	breq	.+18     	; 0x974 <DIO_u8SetPortValue+0x24>
 962:	84 30       	cpi	r24, 0x04	; 4
 964:	69 f4       	brne	.+26     	; 0x980 <DIO_u8SetPortValue+0x30>
 966:	09 c0       	rjmp	.+18     	; 0x97a <DIO_u8SetPortValue+0x2a>
	{
		case DIO_u8PORTA: PORTA=val; break;
 968:	6b bb       	out	0x1b, r22	; 27



u8 DIO_u8SetPortValue(u8 port, u8 val)
{
	u8 Local_u8ErrorState=0;
 96a:	80 e0       	ldi	r24, 0x00	; 0
	switch(port)
	{
		case DIO_u8PORTA: PORTA=val; break;
 96c:	08 95       	ret
		case DIO_u8PORTB: PORTB=val; break;
 96e:	68 bb       	out	0x18, r22	; 24



u8 DIO_u8SetPortValue(u8 port, u8 val)
{
	u8 Local_u8ErrorState=0;
 970:	80 e0       	ldi	r24, 0x00	; 0
	switch(port)
	{
		case DIO_u8PORTA: PORTA=val; break;
		case DIO_u8PORTB: PORTB=val; break;
 972:	08 95       	ret
		case DIO_u8PORTC: PORTC=val; break;
 974:	65 bb       	out	0x15, r22	; 21



u8 DIO_u8SetPortValue(u8 port, u8 val)
{
	u8 Local_u8ErrorState=0;
 976:	80 e0       	ldi	r24, 0x00	; 0
	switch(port)
	{
		case DIO_u8PORTA: PORTA=val; break;
		case DIO_u8PORTB: PORTB=val; break;
		case DIO_u8PORTC: PORTC=val; break;
 978:	08 95       	ret
		case DIO_u8PORTD: PORTD=val; break;
 97a:	62 bb       	out	0x12, r22	; 18



u8 DIO_u8SetPortValue(u8 port, u8 val)
{
	u8 Local_u8ErrorState=0;
 97c:	80 e0       	ldi	r24, 0x00	; 0
	switch(port)
	{
		case DIO_u8PORTA: PORTA=val; break;
		case DIO_u8PORTB: PORTB=val; break;
		case DIO_u8PORTC: PORTC=val; break;
		case DIO_u8PORTD: PORTD=val; break;
 97e:	08 95       	ret
		default:Local_u8ErrorState=1; break;
 980:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return Local_u8ErrorState;
}
 982:	08 95       	ret

00000984 <DIO_u8TogglePin>:


u8 DIO_u8TogglePin(u8 port, u8 pin)
{
	u8 Local_u8ErrorState=0;
	if(pin<=DIO_u8PIN7)
 984:	68 30       	cpi	r22, 0x08	; 8
 986:	08 f0       	brcs	.+2      	; 0x98a <DIO_u8TogglePin+0x6>
 988:	46 c0       	rjmp	.+140    	; 0xa16 <DIO_u8TogglePin+0x92>
	{
		switch(port)
 98a:	82 30       	cpi	r24, 0x02	; 2
 98c:	d1 f0       	breq	.+52     	; 0x9c2 <DIO_u8TogglePin+0x3e>
 98e:	83 30       	cpi	r24, 0x03	; 3
 990:	20 f4       	brcc	.+8      	; 0x99a <DIO_u8TogglePin+0x16>
 992:	81 30       	cpi	r24, 0x01	; 1
 994:	09 f0       	breq	.+2      	; 0x998 <DIO_u8TogglePin+0x14>
 996:	41 c0       	rjmp	.+130    	; 0xa1a <DIO_u8TogglePin+0x96>
 998:	06 c0       	rjmp	.+12     	; 0x9a6 <DIO_u8TogglePin+0x22>
 99a:	83 30       	cpi	r24, 0x03	; 3
 99c:	01 f1       	breq	.+64     	; 0x9de <DIO_u8TogglePin+0x5a>
 99e:	84 30       	cpi	r24, 0x04	; 4
 9a0:	09 f0       	breq	.+2      	; 0x9a4 <DIO_u8TogglePin+0x20>
 9a2:	3b c0       	rjmp	.+118    	; 0xa1a <DIO_u8TogglePin+0x96>
 9a4:	2a c0       	rjmp	.+84     	; 0x9fa <DIO_u8TogglePin+0x76>
		{
			case DIO_u8PORTA : TOG_BIT(PORTA,pin); break;
 9a6:	2b b3       	in	r18, 0x1b	; 27
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	ac 01       	movw	r20, r24
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <DIO_u8TogglePin+0x30>
 9b0:	44 0f       	add	r20, r20
 9b2:	55 1f       	adc	r21, r21
 9b4:	6a 95       	dec	r22
 9b6:	e2 f7       	brpl	.-8      	; 0x9b0 <DIO_u8TogglePin+0x2c>
 9b8:	ba 01       	movw	r22, r20
 9ba:	62 27       	eor	r22, r18
 9bc:	6b bb       	out	0x1b, r22	; 27



u8 DIO_u8TogglePin(u8 port, u8 pin)
{
	u8 Local_u8ErrorState=0;
 9be:	80 e0       	ldi	r24, 0x00	; 0
	if(pin<=DIO_u8PIN7)
	{
		switch(port)
		{
			case DIO_u8PORTA : TOG_BIT(PORTA,pin); break;
 9c0:	08 95       	ret
			case DIO_u8PORTB : TOG_BIT(PORTB,pin); break;
 9c2:	28 b3       	in	r18, 0x18	; 24
 9c4:	81 e0       	ldi	r24, 0x01	; 1
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	ac 01       	movw	r20, r24
 9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <DIO_u8TogglePin+0x4c>
 9cc:	44 0f       	add	r20, r20
 9ce:	55 1f       	adc	r21, r21
 9d0:	6a 95       	dec	r22
 9d2:	e2 f7       	brpl	.-8      	; 0x9cc <DIO_u8TogglePin+0x48>
 9d4:	ba 01       	movw	r22, r20
 9d6:	62 27       	eor	r22, r18
 9d8:	68 bb       	out	0x18, r22	; 24



u8 DIO_u8TogglePin(u8 port, u8 pin)
{
	u8 Local_u8ErrorState=0;
 9da:	80 e0       	ldi	r24, 0x00	; 0
	if(pin<=DIO_u8PIN7)
	{
		switch(port)
		{
			case DIO_u8PORTA : TOG_BIT(PORTA,pin); break;
			case DIO_u8PORTB : TOG_BIT(PORTB,pin); break;
 9dc:	08 95       	ret
			case DIO_u8PORTC : TOG_BIT(PORTC,pin); break;
 9de:	25 b3       	in	r18, 0x15	; 21
 9e0:	81 e0       	ldi	r24, 0x01	; 1
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	ac 01       	movw	r20, r24
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <DIO_u8TogglePin+0x68>
 9e8:	44 0f       	add	r20, r20
 9ea:	55 1f       	adc	r21, r21
 9ec:	6a 95       	dec	r22
 9ee:	e2 f7       	brpl	.-8      	; 0x9e8 <DIO_u8TogglePin+0x64>
 9f0:	ba 01       	movw	r22, r20
 9f2:	62 27       	eor	r22, r18
 9f4:	65 bb       	out	0x15, r22	; 21



u8 DIO_u8TogglePin(u8 port, u8 pin)
{
	u8 Local_u8ErrorState=0;
 9f6:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(port)
		{
			case DIO_u8PORTA : TOG_BIT(PORTA,pin); break;
			case DIO_u8PORTB : TOG_BIT(PORTB,pin); break;
			case DIO_u8PORTC : TOG_BIT(PORTC,pin); break;
 9f8:	08 95       	ret
			case DIO_u8PORTD : TOG_BIT(PORTD,pin); break;
 9fa:	22 b3       	in	r18, 0x12	; 18
 9fc:	81 e0       	ldi	r24, 0x01	; 1
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	ac 01       	movw	r20, r24
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <DIO_u8TogglePin+0x84>
 a04:	44 0f       	add	r20, r20
 a06:	55 1f       	adc	r21, r21
 a08:	6a 95       	dec	r22
 a0a:	e2 f7       	brpl	.-8      	; 0xa04 <DIO_u8TogglePin+0x80>
 a0c:	ba 01       	movw	r22, r20
 a0e:	62 27       	eor	r22, r18
 a10:	62 bb       	out	0x12, r22	; 18



u8 DIO_u8TogglePin(u8 port, u8 pin)
{
	u8 Local_u8ErrorState=0;
 a12:	80 e0       	ldi	r24, 0x00	; 0
		switch(port)
		{
			case DIO_u8PORTA : TOG_BIT(PORTA,pin); break;
			case DIO_u8PORTB : TOG_BIT(PORTB,pin); break;
			case DIO_u8PORTC : TOG_BIT(PORTC,pin); break;
			case DIO_u8PORTD : TOG_BIT(PORTD,pin); break;
 a14:	08 95       	ret
			default: Local_u8ErrorState=1; break;						
		}
		
	}
	else{Local_u8ErrorState=1;}
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	08 95       	ret
		{
			case DIO_u8PORTA : TOG_BIT(PORTA,pin); break;
			case DIO_u8PORTB : TOG_BIT(PORTB,pin); break;
			case DIO_u8PORTC : TOG_BIT(PORTC,pin); break;
			case DIO_u8PORTD : TOG_BIT(PORTD,pin); break;
			default: Local_u8ErrorState=1; break;						
 a1a:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	else{Local_u8ErrorState=1;}
	
	return Local_u8ErrorState;
}
 a1c:	08 95       	ret

00000a1e <DIO_u8TogglePort>:


u8 DIO_u8TogglePort(u8 port)
{
	u8 Local_u8ErrorState=0;
	switch(port)
 a1e:	82 30       	cpi	r24, 0x02	; 2
 a20:	79 f0       	breq	.+30     	; 0xa40 <DIO_u8TogglePort+0x22>
 a22:	83 30       	cpi	r24, 0x03	; 3
 a24:	18 f4       	brcc	.+6      	; 0xa2c <DIO_u8TogglePort+0xe>
 a26:	81 30       	cpi	r24, 0x01	; 1
 a28:	d1 f4       	brne	.+52     	; 0xa5e <DIO_u8TogglePort+0x40>
 a2a:	05 c0       	rjmp	.+10     	; 0xa36 <DIO_u8TogglePort+0x18>
 a2c:	83 30       	cpi	r24, 0x03	; 3
 a2e:	69 f0       	breq	.+26     	; 0xa4a <DIO_u8TogglePort+0x2c>
 a30:	84 30       	cpi	r24, 0x04	; 4
 a32:	a9 f4       	brne	.+42     	; 0xa5e <DIO_u8TogglePort+0x40>
 a34:	0f c0       	rjmp	.+30     	; 0xa54 <DIO_u8TogglePort+0x36>
	{
		case DIO_u8PORTA : PORTA=~PORTA; break;
 a36:	8b b3       	in	r24, 0x1b	; 27
 a38:	80 95       	com	r24
 a3a:	8b bb       	out	0x1b, r24	; 27



u8 DIO_u8TogglePort(u8 port)
{
	u8 Local_u8ErrorState=0;
 a3c:	80 e0       	ldi	r24, 0x00	; 0
	switch(port)
	{
		case DIO_u8PORTA : PORTA=~PORTA; break;
 a3e:	08 95       	ret
		case DIO_u8PORTB : PORTB=~PORTB; break;
 a40:	88 b3       	in	r24, 0x18	; 24
 a42:	80 95       	com	r24
 a44:	88 bb       	out	0x18, r24	; 24



u8 DIO_u8TogglePort(u8 port)
{
	u8 Local_u8ErrorState=0;
 a46:	80 e0       	ldi	r24, 0x00	; 0
	switch(port)
	{
		case DIO_u8PORTA : PORTA=~PORTA; break;
		case DIO_u8PORTB : PORTB=~PORTB; break;
 a48:	08 95       	ret
		case DIO_u8PORTC : PORTC=~PORTC; break;
 a4a:	85 b3       	in	r24, 0x15	; 21
 a4c:	80 95       	com	r24
 a4e:	85 bb       	out	0x15, r24	; 21



u8 DIO_u8TogglePort(u8 port)
{
	u8 Local_u8ErrorState=0;
 a50:	80 e0       	ldi	r24, 0x00	; 0
	switch(port)
	{
		case DIO_u8PORTA : PORTA=~PORTA; break;
		case DIO_u8PORTB : PORTB=~PORTB; break;
		case DIO_u8PORTC : PORTC=~PORTC; break;
 a52:	08 95       	ret
		case DIO_u8PORTD : PORTD=~PORTD; break;
 a54:	82 b3       	in	r24, 0x12	; 18
 a56:	80 95       	com	r24
 a58:	82 bb       	out	0x12, r24	; 18



u8 DIO_u8TogglePort(u8 port)
{
	u8 Local_u8ErrorState=0;
 a5a:	80 e0       	ldi	r24, 0x00	; 0
	switch(port)
	{
		case DIO_u8PORTA : PORTA=~PORTA; break;
		case DIO_u8PORTB : PORTB=~PORTB; break;
		case DIO_u8PORTC : PORTC=~PORTC; break;
		case DIO_u8PORTD : PORTD=~PORTD; break;
 a5c:	08 95       	ret
		default: Local_u8ErrorState=1; break;
 a5e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return Local_u8ErrorState;
}
 a60:	08 95       	ret

00000a62 <DIO_u8ReadPinValue>:


u8 DIO_u8ReadPinValue(u8 port, u8 pin,u8 *val)
{
	u8 Local_u8ErrorState=0;
	if ((val!=NULL)&&(pin<=DIO_u8PIN7))
 a62:	41 15       	cp	r20, r1
 a64:	51 05       	cpc	r21, r1
 a66:	09 f4       	brne	.+2      	; 0xa6a <DIO_u8ReadPinValue+0x8>
 a68:	4d c0       	rjmp	.+154    	; 0xb04 <DIO_u8ReadPinValue+0xa2>
 a6a:	68 30       	cpi	r22, 0x08	; 8
 a6c:	08 f0       	brcs	.+2      	; 0xa70 <DIO_u8ReadPinValue+0xe>
 a6e:	4c c0       	rjmp	.+152    	; 0xb08 <DIO_u8ReadPinValue+0xa6>
	{
		switch(port)
 a70:	82 30       	cpi	r24, 0x02	; 2
 a72:	d9 f0       	breq	.+54     	; 0xaaa <DIO_u8ReadPinValue+0x48>
 a74:	83 30       	cpi	r24, 0x03	; 3
 a76:	20 f4       	brcc	.+8      	; 0xa80 <DIO_u8ReadPinValue+0x1e>
 a78:	81 30       	cpi	r24, 0x01	; 1
 a7a:	09 f0       	breq	.+2      	; 0xa7e <DIO_u8ReadPinValue+0x1c>
 a7c:	47 c0       	rjmp	.+142    	; 0xb0c <DIO_u8ReadPinValue+0xaa>
 a7e:	06 c0       	rjmp	.+12     	; 0xa8c <DIO_u8ReadPinValue+0x2a>
 a80:	83 30       	cpi	r24, 0x03	; 3
 a82:	11 f1       	breq	.+68     	; 0xac8 <DIO_u8ReadPinValue+0x66>
 a84:	84 30       	cpi	r24, 0x04	; 4
 a86:	09 f0       	breq	.+2      	; 0xa8a <DIO_u8ReadPinValue+0x28>
 a88:	41 c0       	rjmp	.+130    	; 0xb0c <DIO_u8ReadPinValue+0xaa>
 a8a:	2d c0       	rjmp	.+90     	; 0xae6 <DIO_u8ReadPinValue+0x84>
		{
			case DIO_u8PORTA : *val=READ_BIT(PINA,pin); break;
 a8c:	89 b3       	in	r24, 0x19	; 25
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	9c 01       	movw	r18, r24
 a92:	02 c0       	rjmp	.+4      	; 0xa98 <DIO_u8ReadPinValue+0x36>
 a94:	35 95       	asr	r19
 a96:	27 95       	ror	r18
 a98:	6a 95       	dec	r22
 a9a:	e2 f7       	brpl	.-8      	; 0xa94 <DIO_u8ReadPinValue+0x32>
 a9c:	b9 01       	movw	r22, r18
 a9e:	61 70       	andi	r22, 0x01	; 1
 aa0:	69 bb       	out	0x19, r22	; 25
 aa2:	fa 01       	movw	r30, r20
 aa4:	60 83       	st	Z, r22



u8 DIO_u8ReadPinValue(u8 port, u8 pin,u8 *val)
{
	u8 Local_u8ErrorState=0;
 aa6:	80 e0       	ldi	r24, 0x00	; 0
	if ((val!=NULL)&&(pin<=DIO_u8PIN7))
	{
		switch(port)
		{
			case DIO_u8PORTA : *val=READ_BIT(PINA,pin); break;
 aa8:	08 95       	ret
			case DIO_u8PORTB : *val=READ_BIT(PINB,pin); break;
 aaa:	86 b3       	in	r24, 0x16	; 22
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	9c 01       	movw	r18, r24
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <DIO_u8ReadPinValue+0x54>
 ab2:	35 95       	asr	r19
 ab4:	27 95       	ror	r18
 ab6:	6a 95       	dec	r22
 ab8:	e2 f7       	brpl	.-8      	; 0xab2 <DIO_u8ReadPinValue+0x50>
 aba:	b9 01       	movw	r22, r18
 abc:	61 70       	andi	r22, 0x01	; 1
 abe:	66 bb       	out	0x16, r22	; 22
 ac0:	fa 01       	movw	r30, r20
 ac2:	60 83       	st	Z, r22



u8 DIO_u8ReadPinValue(u8 port, u8 pin,u8 *val)
{
	u8 Local_u8ErrorState=0;
 ac4:	80 e0       	ldi	r24, 0x00	; 0
	if ((val!=NULL)&&(pin<=DIO_u8PIN7))
	{
		switch(port)
		{
			case DIO_u8PORTA : *val=READ_BIT(PINA,pin); break;
			case DIO_u8PORTB : *val=READ_BIT(PINB,pin); break;
 ac6:	08 95       	ret
			case DIO_u8PORTC : *val=READ_BIT(PINC,pin); break;
 ac8:	83 b3       	in	r24, 0x13	; 19
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	9c 01       	movw	r18, r24
 ace:	02 c0       	rjmp	.+4      	; 0xad4 <DIO_u8ReadPinValue+0x72>
 ad0:	35 95       	asr	r19
 ad2:	27 95       	ror	r18
 ad4:	6a 95       	dec	r22
 ad6:	e2 f7       	brpl	.-8      	; 0xad0 <DIO_u8ReadPinValue+0x6e>
 ad8:	b9 01       	movw	r22, r18
 ada:	61 70       	andi	r22, 0x01	; 1
 adc:	63 bb       	out	0x13, r22	; 19
 ade:	fa 01       	movw	r30, r20
 ae0:	60 83       	st	Z, r22



u8 DIO_u8ReadPinValue(u8 port, u8 pin,u8 *val)
{
	u8 Local_u8ErrorState=0;
 ae2:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(port)
		{
			case DIO_u8PORTA : *val=READ_BIT(PINA,pin); break;
			case DIO_u8PORTB : *val=READ_BIT(PINB,pin); break;
			case DIO_u8PORTC : *val=READ_BIT(PINC,pin); break;
 ae4:	08 95       	ret
			case DIO_u8PORTD : *val=READ_BIT(PIND,pin); break;
 ae6:	80 b3       	in	r24, 0x10	; 16
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	9c 01       	movw	r18, r24
 aec:	02 c0       	rjmp	.+4      	; 0xaf2 <DIO_u8ReadPinValue+0x90>
 aee:	35 95       	asr	r19
 af0:	27 95       	ror	r18
 af2:	6a 95       	dec	r22
 af4:	e2 f7       	brpl	.-8      	; 0xaee <DIO_u8ReadPinValue+0x8c>
 af6:	b9 01       	movw	r22, r18
 af8:	61 70       	andi	r22, 0x01	; 1
 afa:	60 bb       	out	0x10, r22	; 16
 afc:	fa 01       	movw	r30, r20
 afe:	60 83       	st	Z, r22



u8 DIO_u8ReadPinValue(u8 port, u8 pin,u8 *val)
{
	u8 Local_u8ErrorState=0;
 b00:	80 e0       	ldi	r24, 0x00	; 0
		switch(port)
		{
			case DIO_u8PORTA : *val=READ_BIT(PINA,pin); break;
			case DIO_u8PORTB : *val=READ_BIT(PINB,pin); break;
			case DIO_u8PORTC : *val=READ_BIT(PINC,pin); break;
			case DIO_u8PORTD : *val=READ_BIT(PIND,pin); break;
 b02:	08 95       	ret
			default: Local_u8ErrorState=1; break;
		}
	}
	else{Local_u8ErrorState=1;}
 b04:	81 e0       	ldi	r24, 0x01	; 1
 b06:	08 95       	ret
 b08:	81 e0       	ldi	r24, 0x01	; 1
 b0a:	08 95       	ret
		{
			case DIO_u8PORTA : *val=READ_BIT(PINA,pin); break;
			case DIO_u8PORTB : *val=READ_BIT(PINB,pin); break;
			case DIO_u8PORTC : *val=READ_BIT(PINC,pin); break;
			case DIO_u8PORTD : *val=READ_BIT(PIND,pin); break;
			default: Local_u8ErrorState=1; break;
 b0c:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{Local_u8ErrorState=1;}
	
	
	return Local_u8ErrorState;
}
 b0e:	08 95       	ret

00000b10 <DIO_u8readPort>:

u8 DIO_u8readPort(u8 portname,u8 pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 b10:	82 30       	cpi	r24, 0x02	; 2
 b12:	a9 f0       	breq	.+42     	; 0xb3e <DIO_u8readPort+0x2e>
 b14:	83 30       	cpi	r24, 0x03	; 3
 b16:	18 f4       	brcc	.+6      	; 0xb1e <DIO_u8readPort+0xe>
 b18:	81 30       	cpi	r24, 0x01	; 1
 b1a:	91 f5       	brne	.+100    	; 0xb80 <DIO_u8readPort+0x70>
 b1c:	05 c0       	rjmp	.+10     	; 0xb28 <DIO_u8readPort+0x18>
 b1e:	83 30       	cpi	r24, 0x03	; 3
 b20:	c9 f0       	breq	.+50     	; 0xb54 <DIO_u8readPort+0x44>
 b22:	84 30       	cpi	r24, 0x04	; 4
 b24:	69 f5       	brne	.+90     	; 0xb80 <DIO_u8readPort+0x70>
 b26:	21 c0       	rjmp	.+66     	; 0xb6a <DIO_u8readPort+0x5a>
	{
		case DIO_u8PORTA :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 b28:	29 b3       	in	r18, 0x19	; 25
 b2a:	30 e0       	ldi	r19, 0x00	; 0
 b2c:	c9 01       	movw	r24, r18
 b2e:	02 c0       	rjmp	.+4      	; 0xb34 <DIO_u8readPort+0x24>
 b30:	95 95       	asr	r25
 b32:	87 95       	ror	r24
 b34:	6a 95       	dec	r22
 b36:	e2 f7       	brpl	.-8      	; 0xb30 <DIO_u8readPort+0x20>
 b38:	81 70       	andi	r24, 0x01	; 1
 b3a:	89 bb       	out	0x19, r24	; 25
		break;
 b3c:	08 95       	ret
		
		case DIO_u8PORTB :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 b3e:	26 b3       	in	r18, 0x16	; 22
 b40:	30 e0       	ldi	r19, 0x00	; 0
 b42:	c9 01       	movw	r24, r18
 b44:	02 c0       	rjmp	.+4      	; 0xb4a <DIO_u8readPort+0x3a>
 b46:	95 95       	asr	r25
 b48:	87 95       	ror	r24
 b4a:	6a 95       	dec	r22
 b4c:	e2 f7       	brpl	.-8      	; 0xb46 <DIO_u8readPort+0x36>
 b4e:	81 70       	andi	r24, 0x01	; 1
 b50:	86 bb       	out	0x16, r24	; 22
		break;
 b52:	08 95       	ret
		
		case DIO_u8PORTC :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 b54:	23 b3       	in	r18, 0x13	; 19
 b56:	30 e0       	ldi	r19, 0x00	; 0
 b58:	c9 01       	movw	r24, r18
 b5a:	02 c0       	rjmp	.+4      	; 0xb60 <DIO_u8readPort+0x50>
 b5c:	95 95       	asr	r25
 b5e:	87 95       	ror	r24
 b60:	6a 95       	dec	r22
 b62:	e2 f7       	brpl	.-8      	; 0xb5c <DIO_u8readPort+0x4c>
 b64:	81 70       	andi	r24, 0x01	; 1
 b66:	83 bb       	out	0x13, r24	; 19
		break;
 b68:	08 95       	ret
		
		case DIO_u8PORTD :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 b6a:	20 b3       	in	r18, 0x10	; 16
 b6c:	30 e0       	ldi	r19, 0x00	; 0
 b6e:	c9 01       	movw	r24, r18
 b70:	02 c0       	rjmp	.+4      	; 0xb76 <DIO_u8readPort+0x66>
 b72:	95 95       	asr	r25
 b74:	87 95       	ror	r24
 b76:	6a 95       	dec	r22
 b78:	e2 f7       	brpl	.-8      	; 0xb72 <DIO_u8readPort+0x62>
 b7a:	81 70       	andi	r24, 0x01	; 1
 b7c:	80 bb       	out	0x10, r24	; 16
		break;
 b7e:	08 95       	ret
	return Local_u8ErrorState;
}

u8 DIO_u8readPort(u8 portname,u8 pinnumber)
{
	unsigned char return_value=0;
 b80:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return return_value ;
}
 b82:	08 95       	ret

00000b84 <KPD_vINIT>:



void KPD_vINIT(void)
{
	DIO_u8SetPinDirection(KPD_PORT,KPD_COLUMN0_PIN,DIO_u8PIN_OUTPUT);			
 b84:	84 e0       	ldi	r24, 0x04	; 4
 b86:	64 e0       	ldi	r22, 0x04	; 4
 b88:	41 e0       	ldi	r20, 0x01	; 1
 b8a:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COLUMN1_PIN,DIO_u8PIN_OUTPUT);			
 b8e:	84 e0       	ldi	r24, 0x04	; 4
 b90:	65 e0       	ldi	r22, 0x05	; 5
 b92:	41 e0       	ldi	r20, 0x01	; 1
 b94:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COLUMN2_PIN,DIO_u8PIN_OUTPUT);			
 b98:	84 e0       	ldi	r24, 0x04	; 4
 b9a:	66 e0       	ldi	r22, 0x06	; 6
 b9c:	41 e0       	ldi	r20, 0x01	; 1
 b9e:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COLUMN3_PIN,DIO_u8PIN_OUTPUT);			
 ba2:	84 e0       	ldi	r24, 0x04	; 4
 ba4:	67 e0       	ldi	r22, 0x07	; 7
 ba6:	41 e0       	ldi	r20, 0x01	; 1
 ba8:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_u8SetPinDirection>
	
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW0_PIN,DIO_u8PIN_INPUT);
 bac:	84 e0       	ldi	r24, 0x04	; 4
 bae:	60 e0       	ldi	r22, 0x00	; 0
 bb0:	40 e0       	ldi	r20, 0x00	; 0
 bb2:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW1_PIN,DIO_u8PIN_INPUT);
 bb6:	84 e0       	ldi	r24, 0x04	; 4
 bb8:	61 e0       	ldi	r22, 0x01	; 1
 bba:	40 e0       	ldi	r20, 0x00	; 0
 bbc:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW2_PIN,DIO_u8PIN_INPUT);
 bc0:	84 e0       	ldi	r24, 0x04	; 4
 bc2:	62 e0       	ldi	r22, 0x02	; 2
 bc4:	40 e0       	ldi	r20, 0x00	; 0
 bc6:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW3_PIN,DIO_u8PIN_INPUT);
 bca:	84 e0       	ldi	r24, 0x04	; 4
 bcc:	63 e0       	ldi	r22, 0x03	; 3
 bce:	40 e0       	ldi	r20, 0x00	; 0
 bd0:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_u8SetPinDirection>
	
	DIO_u8SetPinValue(KPD_PORT,KPD_COLUMN0_PIN,DIO_u8PIN_HIGH);
 bd4:	84 e0       	ldi	r24, 0x04	; 4
 bd6:	64 e0       	ldi	r22, 0x04	; 4
 bd8:	41 e0       	ldi	r20, 0x01	; 1
 bda:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COLUMN1_PIN,DIO_u8PIN_HIGH);
 bde:	84 e0       	ldi	r24, 0x04	; 4
 be0:	65 e0       	ldi	r22, 0x05	; 5
 be2:	41 e0       	ldi	r20, 0x01	; 1
 be4:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COLUMN2_PIN,DIO_u8PIN_HIGH);
 be8:	84 e0       	ldi	r24, 0x04	; 4
 bea:	66 e0       	ldi	r22, 0x06	; 6
 bec:	41 e0       	ldi	r20, 0x01	; 1
 bee:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COLUMN3_PIN,DIO_u8PIN_HIGH);
 bf2:	84 e0       	ldi	r24, 0x04	; 4
 bf4:	67 e0       	ldi	r22, 0x07	; 7
 bf6:	41 e0       	ldi	r20, 0x01	; 1
 bf8:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
	
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW0_PIN,DIO_u8PIN_HIGH);
 bfc:	84 e0       	ldi	r24, 0x04	; 4
 bfe:	60 e0       	ldi	r22, 0x00	; 0
 c00:	41 e0       	ldi	r20, 0x01	; 1
 c02:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW1_PIN,DIO_u8PIN_HIGH);
 c06:	84 e0       	ldi	r24, 0x04	; 4
 c08:	61 e0       	ldi	r22, 0x01	; 1
 c0a:	41 e0       	ldi	r20, 0x01	; 1
 c0c:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW2_PIN,DIO_u8PIN_HIGH);
 c10:	84 e0       	ldi	r24, 0x04	; 4
 c12:	62 e0       	ldi	r22, 0x02	; 2
 c14:	41 e0       	ldi	r20, 0x01	; 1
 c16:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW3_PIN,DIO_u8PIN_HIGH);
 c1a:	84 e0       	ldi	r24, 0x04	; 4
 c1c:	63 e0       	ldi	r22, 0x03	; 3
 c1e:	41 e0       	ldi	r20, 0x01	; 1
 c20:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
}
 c24:	08 95       	ret

00000c26 <KPD_u8GetPressdKey>:

u8 KPD_u8GetPressdKey(void)
{
 c26:	2f 92       	push	r2
 c28:	3f 92       	push	r3
 c2a:	4f 92       	push	r4
 c2c:	5f 92       	push	r5
 c2e:	6f 92       	push	r6
 c30:	7f 92       	push	r7
 c32:	8f 92       	push	r8
 c34:	9f 92       	push	r9
 c36:	af 92       	push	r10
 c38:	bf 92       	push	r11
 c3a:	cf 92       	push	r12
 c3c:	df 92       	push	r13
 c3e:	ef 92       	push	r14
 c40:	ff 92       	push	r15
 c42:	0f 93       	push	r16
 c44:	1f 93       	push	r17
 c46:	cf 93       	push	r28
 c48:	df 93       	push	r29
 c4a:	00 d0       	rcall	.+0      	; 0xc4c <KPD_u8GetPressdKey+0x26>
 c4c:	0f 92       	push	r0
 c4e:	cd b7       	in	r28, 0x3d	; 61
 c50:	de b7       	in	r29, 0x3e	; 62
		}
		//return column high
		DIO_u8SetPinValue(KPD_PORT,Local_columnarr[Local_columcounter],DIO_u8PIN_HIGH);
	}
	
	return Local_PressedKey;
 c52:	0f 2e       	mov	r0, r31
 c54:	f6 e6       	ldi	r31, 0x66	; 102
 c56:	6f 2e       	mov	r6, r31
 c58:	f0 e0       	ldi	r31, 0x00	; 0
 c5a:	7f 2e       	mov	r7, r31
 c5c:	f0 2d       	mov	r31, r0
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW2_PIN,DIO_u8PIN_HIGH);
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW3_PIN,DIO_u8PIN_HIGH);
}

u8 KPD_u8GetPressdKey(void)
{
 c5e:	aa 24       	eor	r10, r10
 c60:	bb 24       	eor	r11, r11
	static u8 Local_columnarr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_rowarr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
	
	for (Local_columcounter=0;Local_columcounter<COLUMN_NUM;Local_columcounter++)
	{
		DIO_u8SetPinValue(KPD_PORT,Local_columnarr[Local_columcounter],DIO_u8PIN_LOW);
 c62:	0f 2e       	mov	r0, r31
 c64:	fa e6       	ldi	r31, 0x6A	; 106
 c66:	4f 2e       	mov	r4, r31
 c68:	f0 e0       	ldi	r31, 0x00	; 0
 c6a:	5f 2e       	mov	r5, r31
 c6c:	f0 2d       	mov	r31, r0
 c6e:	22 24       	eor	r2, r2
 c70:	33 24       	eor	r3, r3
 c72:	bb 82       	std	Y+3, r11	; 0x03
 c74:	aa 82       	std	Y+2, r10	; 0x02
 c76:	f3 01       	movw	r30, r6
 c78:	e1 90       	ld	r14, Z+
 c7a:	3f 01       	movw	r6, r30
 c7c:	84 e0       	ldi	r24, 0x04	; 4
 c7e:	6e 2d       	mov	r22, r14
 c80:	40 e0       	ldi	r20, 0x00	; 0
 c82:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
 c86:	62 01       	movw	r12, r4
 c88:	81 01       	movw	r16, r2
		for(Local_rowconter=0;Local_rowconter<ROW_NUM;Local_rowconter++)
		{
			DIO_u8ReadPinValue(KPD_PORT, Local_rowarr[Local_rowconter],&Local_pinstate);
 c8a:	f6 01       	movw	r30, r12
 c8c:	f1 90       	ld	r15, Z+
 c8e:	6f 01       	movw	r12, r30
 c90:	84 e0       	ldi	r24, 0x04	; 4
 c92:	6f 2d       	mov	r22, r15
 c94:	ae 01       	movw	r20, r28
 c96:	4f 5f       	subi	r20, 0xFF	; 255
 c98:	5f 4f       	sbci	r21, 0xFF	; 255
 c9a:	0e 94 31 05 	call	0xa62	; 0xa62 <DIO_u8ReadPinValue>
			if (Local_pinstate==DIO_u8PIN_LOW)
 c9e:	89 81       	ldd	r24, Y+1	; 0x01
 ca0:	88 23       	and	r24, r24
 ca2:	b9 f4       	brne	.+46     	; 0xcd2 <KPD_u8GetPressdKey+0xac>
			{
				Local_PressedKey=Local_KpdArr[Local_rowconter][Local_columcounter];
 ca4:	f8 01       	movw	r30, r16
 ca6:	ee 0f       	add	r30, r30
 ca8:	ff 1f       	adc	r31, r31
 caa:	ee 0f       	add	r30, r30
 cac:	ff 1f       	adc	r31, r31
 cae:	8a 81       	ldd	r24, Y+2	; 0x02
 cb0:	9b 81       	ldd	r25, Y+3	; 0x03
 cb2:	e8 0f       	add	r30, r24
 cb4:	f9 1f       	adc	r31, r25
 cb6:	e2 59       	subi	r30, 0x92	; 146
 cb8:	ff 4f       	sbci	r31, 0xFF	; 255
 cba:	00 81       	ld	r16, Z
				//Pooling (busy wating) until the key is released
				while(Local_pinstate==DIO_u8PIN_LOW)
				{
					DIO_u8ReadPinValue(KPD_PORT, Local_rowarr[Local_rowconter],&Local_pinstate);
 cbc:	84 e0       	ldi	r24, 0x04	; 4
 cbe:	6f 2d       	mov	r22, r15
 cc0:	ae 01       	movw	r20, r28
 cc2:	4f 5f       	subi	r20, 0xFF	; 255
 cc4:	5f 4f       	sbci	r21, 0xFF	; 255
 cc6:	0e 94 31 05 	call	0xa62	; 0xa62 <DIO_u8ReadPinValue>
			DIO_u8ReadPinValue(KPD_PORT, Local_rowarr[Local_rowconter],&Local_pinstate);
			if (Local_pinstate==DIO_u8PIN_LOW)
			{
				Local_PressedKey=Local_KpdArr[Local_rowconter][Local_columcounter];
				//Pooling (busy wating) until the key is released
				while(Local_pinstate==DIO_u8PIN_LOW)
 cca:	89 81       	ldd	r24, Y+1	; 0x01
 ccc:	88 23       	and	r24, r24
 cce:	b1 f3       	breq	.-20     	; 0xcbc <KPD_u8GetPressdKey+0x96>
 cd0:	13 c0       	rjmp	.+38     	; 0xcf8 <KPD_u8GetPressdKey+0xd2>
 cd2:	0f 5f       	subi	r16, 0xFF	; 255
 cd4:	1f 4f       	sbci	r17, 0xFF	; 255
	static u8 Local_rowarr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
	
	for (Local_columcounter=0;Local_columcounter<COLUMN_NUM;Local_columcounter++)
	{
		DIO_u8SetPinValue(KPD_PORT,Local_columnarr[Local_columcounter],DIO_u8PIN_LOW);
		for(Local_rowconter=0;Local_rowconter<ROW_NUM;Local_rowconter++)
 cd6:	04 30       	cpi	r16, 0x04	; 4
 cd8:	11 05       	cpc	r17, r1
 cda:	b9 f6       	brne	.-82     	; 0xc8a <KPD_u8GetPressdKey+0x64>
	
			}
			
		}
		//return column high
		DIO_u8SetPinValue(KPD_PORT,Local_columnarr[Local_columcounter],DIO_u8PIN_HIGH);
 cdc:	84 e0       	ldi	r24, 0x04	; 4
 cde:	6e 2d       	mov	r22, r14
 ce0:	41 e0       	ldi	r20, 0x01	; 1
 ce2:	0e 94 07 04 	call	0x80e	; 0x80e <DIO_u8SetPinValue>
 ce6:	08 94       	sec
 ce8:	a1 1c       	adc	r10, r1
 cea:	b1 1c       	adc	r11, r1
	static u8 Local_KpdArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;
	
	static u8 Local_columnarr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_rowarr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
	
	for (Local_columcounter=0;Local_columcounter<COLUMN_NUM;Local_columcounter++)
 cec:	94 e0       	ldi	r25, 0x04	; 4
 cee:	a9 16       	cp	r10, r25
 cf0:	b1 04       	cpc	r11, r1
 cf2:	09 f0       	breq	.+2      	; 0xcf6 <KPD_u8GetPressdKey+0xd0>
 cf4:	be cf       	rjmp	.-132    	; 0xc72 <KPD_u8GetPressdKey+0x4c>
		}
		//return column high
		DIO_u8SetPinValue(KPD_PORT,Local_columnarr[Local_columcounter],DIO_u8PIN_HIGH);
	}
	
	return Local_PressedKey;
 cf6:	0f ef       	ldi	r16, 0xFF	; 255
}
 cf8:	80 2f       	mov	r24, r16
 cfa:	0f 90       	pop	r0
 cfc:	0f 90       	pop	r0
 cfe:	0f 90       	pop	r0
 d00:	df 91       	pop	r29
 d02:	cf 91       	pop	r28
 d04:	1f 91       	pop	r17
 d06:	0f 91       	pop	r16
 d08:	ff 90       	pop	r15
 d0a:	ef 90       	pop	r14
 d0c:	df 90       	pop	r13
 d0e:	cf 90       	pop	r12
 d10:	bf 90       	pop	r11
 d12:	af 90       	pop	r10
 d14:	9f 90       	pop	r9
 d16:	8f 90       	pop	r8
 d18:	7f 90       	pop	r7
 d1a:	6f 90       	pop	r6
 d1c:	5f 90       	pop	r5
 d1e:	4f 90       	pop	r4
 d20:	3f 90       	pop	r3
 d22:	2f 90       	pop	r2
 d24:	08 95       	ret

00000d26 <__mulsi3>:
 d26:	62 9f       	mul	r22, r18
 d28:	d0 01       	movw	r26, r0
 d2a:	73 9f       	mul	r23, r19
 d2c:	f0 01       	movw	r30, r0
 d2e:	82 9f       	mul	r24, r18
 d30:	e0 0d       	add	r30, r0
 d32:	f1 1d       	adc	r31, r1
 d34:	64 9f       	mul	r22, r20
 d36:	e0 0d       	add	r30, r0
 d38:	f1 1d       	adc	r31, r1
 d3a:	92 9f       	mul	r25, r18
 d3c:	f0 0d       	add	r31, r0
 d3e:	83 9f       	mul	r24, r19
 d40:	f0 0d       	add	r31, r0
 d42:	74 9f       	mul	r23, r20
 d44:	f0 0d       	add	r31, r0
 d46:	65 9f       	mul	r22, r21
 d48:	f0 0d       	add	r31, r0
 d4a:	99 27       	eor	r25, r25
 d4c:	72 9f       	mul	r23, r18
 d4e:	b0 0d       	add	r27, r0
 d50:	e1 1d       	adc	r30, r1
 d52:	f9 1f       	adc	r31, r25
 d54:	63 9f       	mul	r22, r19
 d56:	b0 0d       	add	r27, r0
 d58:	e1 1d       	adc	r30, r1
 d5a:	f9 1f       	adc	r31, r25
 d5c:	bd 01       	movw	r22, r26
 d5e:	cf 01       	movw	r24, r30
 d60:	11 24       	eor	r1, r1
 d62:	08 95       	ret

00000d64 <__divmodhi4>:
 d64:	97 fb       	bst	r25, 7
 d66:	09 2e       	mov	r0, r25
 d68:	07 26       	eor	r0, r23
 d6a:	0a d0       	rcall	.+20     	; 0xd80 <__divmodhi4_neg1>
 d6c:	77 fd       	sbrc	r23, 7
 d6e:	04 d0       	rcall	.+8      	; 0xd78 <__divmodhi4_neg2>
 d70:	2e d0       	rcall	.+92     	; 0xdce <__udivmodhi4>
 d72:	06 d0       	rcall	.+12     	; 0xd80 <__divmodhi4_neg1>
 d74:	00 20       	and	r0, r0
 d76:	1a f4       	brpl	.+6      	; 0xd7e <__divmodhi4_exit>

00000d78 <__divmodhi4_neg2>:
 d78:	70 95       	com	r23
 d7a:	61 95       	neg	r22
 d7c:	7f 4f       	sbci	r23, 0xFF	; 255

00000d7e <__divmodhi4_exit>:
 d7e:	08 95       	ret

00000d80 <__divmodhi4_neg1>:
 d80:	f6 f7       	brtc	.-4      	; 0xd7e <__divmodhi4_exit>
 d82:	90 95       	com	r25
 d84:	81 95       	neg	r24
 d86:	9f 4f       	sbci	r25, 0xFF	; 255
 d88:	08 95       	ret

00000d8a <__udivmodsi4>:
 d8a:	a1 e2       	ldi	r26, 0x21	; 33
 d8c:	1a 2e       	mov	r1, r26
 d8e:	aa 1b       	sub	r26, r26
 d90:	bb 1b       	sub	r27, r27
 d92:	fd 01       	movw	r30, r26
 d94:	0d c0       	rjmp	.+26     	; 0xdb0 <__udivmodsi4_ep>

00000d96 <__udivmodsi4_loop>:
 d96:	aa 1f       	adc	r26, r26
 d98:	bb 1f       	adc	r27, r27
 d9a:	ee 1f       	adc	r30, r30
 d9c:	ff 1f       	adc	r31, r31
 d9e:	a2 17       	cp	r26, r18
 da0:	b3 07       	cpc	r27, r19
 da2:	e4 07       	cpc	r30, r20
 da4:	f5 07       	cpc	r31, r21
 da6:	20 f0       	brcs	.+8      	; 0xdb0 <__udivmodsi4_ep>
 da8:	a2 1b       	sub	r26, r18
 daa:	b3 0b       	sbc	r27, r19
 dac:	e4 0b       	sbc	r30, r20
 dae:	f5 0b       	sbc	r31, r21

00000db0 <__udivmodsi4_ep>:
 db0:	66 1f       	adc	r22, r22
 db2:	77 1f       	adc	r23, r23
 db4:	88 1f       	adc	r24, r24
 db6:	99 1f       	adc	r25, r25
 db8:	1a 94       	dec	r1
 dba:	69 f7       	brne	.-38     	; 0xd96 <__udivmodsi4_loop>
 dbc:	60 95       	com	r22
 dbe:	70 95       	com	r23
 dc0:	80 95       	com	r24
 dc2:	90 95       	com	r25
 dc4:	9b 01       	movw	r18, r22
 dc6:	ac 01       	movw	r20, r24
 dc8:	bd 01       	movw	r22, r26
 dca:	cf 01       	movw	r24, r30
 dcc:	08 95       	ret

00000dce <__udivmodhi4>:
 dce:	aa 1b       	sub	r26, r26
 dd0:	bb 1b       	sub	r27, r27
 dd2:	51 e1       	ldi	r21, 0x11	; 17
 dd4:	07 c0       	rjmp	.+14     	; 0xde4 <__udivmodhi4_ep>

00000dd6 <__udivmodhi4_loop>:
 dd6:	aa 1f       	adc	r26, r26
 dd8:	bb 1f       	adc	r27, r27
 dda:	a6 17       	cp	r26, r22
 ddc:	b7 07       	cpc	r27, r23
 dde:	10 f0       	brcs	.+4      	; 0xde4 <__udivmodhi4_ep>
 de0:	a6 1b       	sub	r26, r22
 de2:	b7 0b       	sbc	r27, r23

00000de4 <__udivmodhi4_ep>:
 de4:	88 1f       	adc	r24, r24
 de6:	99 1f       	adc	r25, r25
 de8:	5a 95       	dec	r21
 dea:	a9 f7       	brne	.-22     	; 0xdd6 <__udivmodhi4_loop>
 dec:	80 95       	com	r24
 dee:	90 95       	com	r25
 df0:	bc 01       	movw	r22, r24
 df2:	cd 01       	movw	r24, r26
 df4:	08 95       	ret

00000df6 <_exit>:
 df6:	f8 94       	cli

00000df8 <__stop_program>:
 df8:	ff cf       	rjmp	.-2      	; 0xdf8 <__stop_program>
